precompile(Tuple{typeof(WebIO.setup_provider), Symbol})
precompile(Tuple{typeof(WebIO.re_register_renderables)})
precompile(Tuple{typeof(WebIO.setup), Symbol})
precompile(Tuple{typeof(Base.vect), Base.Pair{String, String}, Vararg{Any, N} where N})
precompile(Tuple{Type{Ref{WebIO.WebIOServer{S} where S}}})
precompile(Tuple{typeof(Base.debug_color)})
precompile(Tuple{typeof(Base.warn_color)})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Module, String, Symbol, String, Int64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64, Int64})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.TTY})
precompile(Tuple{typeof(Base.afoldl), typeof(Base.:(+)), Int64, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#708")), Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Nothing, Nothing, Symbol})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, String, Nothing, Nothing, Symbol, Nothing, Int64})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Nothing, Nothing, Symbol, Nothing, Int64})
precompile(Tuple{getfield(InteractiveUtils, Symbol("#@which")), LineNumberNode, Module, Any})
precompile(Tuple{typeof(Base.similar), Array{IRTools.Inner.Variable, 1}, Type{T} where T})
precompile(Tuple{typeof(Base.which), Any, Any})
precompile(Tuple{typeof(Zygote.xtuple), IRTools.Inner.Variable, Vararg{IRTools.Inner.Variable, N} where N})
precompile(Tuple{typeof(IRTools.Inner.xcall), Symbol, IRTools.Inner.Variable, IRTools.Inner.Variable, Vararg{IRTools.Inner.Variable, N} where N})
precompile(Tuple{typeof(IRTools.Inner.xcall), Module, Symbol, IRTools.Inner.Variable, Vararg{IRTools.Inner.Variable, N} where N})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Zygote.Pullback{Tuple{typeof(Zygote.pow), Int64, Int64}, Any}}})
precompile(Tuple{typeof(ZygoteRules._pullback), Zygote.Context, typeof(Zygote.pow), Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Zygote.Pullback{Tuple{typeof(Zygote.pow), Int64, Int64}, Any}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Zygote.Pullback{Tuple{typeof(Zygote.pow), Int64, Int64}, Any}}, Int64, Int64})
precompile(Tuple{Zygote.Pullback{Tuple{typeof(Zygote.pow), Int64, Int64}, Any}, Int64})
precompile(Tuple{getfield(Zygote, Symbol("#38#39")){Zygote.Pullback{Tuple{typeof(Zygote.pow), Int64, Int64}, Any}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{Zygote.Pullback{Tuple{getfield(Zygote, Symbol("#1919#1920")), Array{Int64, 1}, Array{Int64, 1}}, T} where T}})
precompile(Tuple{typeof(ZygoteRules._pullback), Zygote.Context, getfield(Zygote, Symbol("#1919#1920")), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Zygote.Pullback{Tuple{getfield(Zygote, Symbol("#1919#1920")), Array{Int64, 1}, Array{Int64, 1}}, Tuple{getfield(Zygote, Symbol("#3072#back#1192")){getfield(Zygote, Symbol("#1188#1190")){Array{Int64, 1}}}, Zygote.Pullback{Tuple{typeof(Base.Broadcast.materialize), Array{Int64, 1}}, Tuple{}}, getfield(Zygote, Symbol("#4042#back#1621")){getfield(Zygote, Symbol("#1619#1620")){Array{Int64, 1}, Array{Int64, 1}}}}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Zygote.Pullback{Tuple{getfield(Zygote, Symbol("#1919#1920")), Array{Int64, 1}, Array{Int64, 1}}, Tuple{getfield(Zygote, Symbol("#3072#back#1192")){getfield(Zygote, Symbol("#1188#1190")){Array{Int64, 1}}}, Zygote.Pullback{Tuple{typeof(Base.Broadcast.materialize), Array{Int64, 1}}, Tuple{}}, getfield(Zygote, Symbol("#4042#back#1621")){getfield(Zygote, Symbol("#1619#1620")){Array{Int64, 1}, Array{Int64, 1}}}}}}, Int64, Int64})
precompile(Tuple{getfield(Zygote, Symbol("#38#39")){Zygote.Pullback{Tuple{getfield(Zygote, Symbol("#1919#1920")), Array{Int64, 1}, Array{Int64, 1}}, Tuple{getfield(Zygote, Symbol("#3072#back#1192")){getfield(Zygote, Symbol("#1188#1190")){Array{Int64, 1}}}, Zygote.Pullback{Tuple{typeof(Base.Broadcast.materialize), Array{Int64, 1}}, Tuple{}}, getfield(Zygote, Symbol("#4042#back#1621")){getfield(Zygote, Symbol("#1619#1620")){Array{Int64, 1}, Array{Int64, 1}}}}}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{Zygote.Pullback{Tuple{getfield(Zygote, Symbol("#1921#1922")), Array{Float64, 1}}, T} where T}})
precompile(Tuple{typeof(ZygoteRules._pullback), Zygote.Context, getfield(Zygote, Symbol("#1921#1922")), Array{Float64, 1}})
precompile(Tuple{Type{Zygote.Pullback{Tuple{getfield(Zygote, Symbol("#1921#1922")), Array{Float64, 1}}, T} where T}, Tuple{getfield(Zygote, Symbol("#3072#back#1192")){getfield(Zygote, Symbol("#1188#1190")){Array{Float32, 1}}}, Zygote.Pullback{Tuple{typeof(Base.Broadcast.broadcasted), Type{Float32}, Array{Float64, 1}}, Tuple{getfield(Zygote, Symbol("#331#back#173")){getfield(Zygote, Symbol("#171#172")){getfield(Zygote, Symbol("#1599#1601")), Tuple{Tuple{Nothing}, Tuple{}}}}, getfield(Zygote, Symbol("#234#back#125")){typeof(Base.identity)}, getfield(Zygote, Symbol("#331#back#173")){getfield(Zygote, Symbol("#171#172")){getfield(Zygote, Symbol("#4150#back#1670")){getfield(Zygote, Symbol("#1659#1666")){Tuple{Array{Float64, 1}}, Base.Val{2}, Array{getfield(Zygote, Symbol("#1813#back#682")){getfield(Zygote, Symbol("#680#681"))}, 1}}}, Tuple{Tuple{Nothing, Nothing, Nothing}, Tuple{}}}}, getfield(Zygote, Symbol("#3024#back#1171")){getfield(Zygote, Symbol("#1164#1168"))}, Zygote.Pullback{Tuple{typeof(Base.Broadcast.broadcastable), Array{Float64, 1}}, Tuple{}}, getfield(Zygote, Symbol("#234#back#125")){typeof(Base.identity)}}}, Zygote.Pullback{Tuple{typeof(Base.Broadcast.materialize), Array{Float32, 1}}, Tuple{}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float32, Zygote.Pullback{Tuple{getfield(Zygote, Symbol("#1921#1922")), Array{Float64, 1}}, Tuple{getfield(Zygote, Symbol("#3072#back#1192")){getfield(Zygote, Symbol("#1188#1190")){Array{Float32, 1}}}, Zygote.Pullback{Tuple{typeof(Base.Broadcast.broadcasted), Type{Float32}, Array{Float64, 1}}, Tuple{getfield(Zygote, Symbol("#331#back#173")){getfield(Zygote, Symbol("#171#172")){getfield(Zygote, Symbol("#1599#1601")), Tuple{Tuple{Nothing}, Tuple{}}}}, getfield(Zygote, Symbol("#234#back#125")){typeof(Base.identity)}, getfield(Zygote, Symbol("#331#back#173")){getfield(Zygote, Symbol("#171#172")){getfield(Zygote, Symbol("#4150#back#1670")){getfield(Zygote, Symbol("#1659#1666")){Tuple{Array{Float64, 1}}, Base.Val{2}, Array{getfield(Zygote, Symbol("#1813#back#682")){getfield(Zygote, Symbol("#680#681"))}, 1}}}, Tuple{Tuple{Nothing, Nothing, Nothing}, Tuple{}}}}, getfield(Zygote, Symbol("#3024#back#1171")){getfield(Zygote, Symbol("#1164#1168"))}, Zygote.Pullback{Tuple{typeof(Base.Broadcast.broadcastable), Array{Float64, 1}}, Tuple{}}, getfield(Zygote, Symbol("#234#back#125")){typeof(Base.identity)}}}, Zygote.Pullback{Tuple{typeof(Base.Broadcast.materialize), Array{Float32, 1}}, Tuple{}}}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Float32, Zygote.Pullback{Tuple{getfield(Zygote, Symbol("#1921#1922")), Array{Float64, 1}}, Tuple{getfield(Zygote, Symbol("#3072#back#1192")){getfield(Zygote, Symbol("#1188#1190")){Array{Float32, 1}}}, Zygote.Pullback{Tuple{typeof(Base.Broadcast.broadcasted), Type{Float32}, Array{Float64, 1}}, Tuple{getfield(Zygote, Symbol("#331#back#173")){getfield(Zygote, Symbol("#171#172")){getfield(Zygote, Symbol("#1599#1601")), Tuple{Tuple{Nothing}, Tuple{}}}}, getfield(Zygote, Symbol("#234#back#125")){typeof(Base.identity)}, getfield(Zygote, Symbol("#331#back#173")){getfield(Zygote, Symbol("#171#172")){getfield(Zygote, Symbol("#4150#back#1670")){getfield(Zygote, Symbol("#1659#1666")){Tuple{Array{Float64, 1}}, Base.Val{2}, Array{getfield(Zygote, Symbol("#1813#back#682")){getfield(Zygote, Symbol("#680#681"))}, 1}}}, Tuple{Tuple{Nothing, Nothing, Nothing}, Tuple{}}}}, getfield(Zygote, Symbol("#3024#back#1171")){getfield(Zygote, Symbol("#1164#1168"))}, Zygote.Pullback{Tuple{typeof(Base.Broadcast.broadcastable), Array{Float64, 1}}, Tuple{}}, getfield(Zygote, Symbol("#234#back#125")){typeof(Base.identity)}}}, Zygote.Pullback{Tuple{typeof(Base.Broadcast.materialize), Array{Float32, 1}}, Tuple{}}}}}, Int64, Int64})
precompile(Tuple{Zygote.Pullback{Tuple{getfield(Zygote, Symbol("#1921#1922")), Array{Float64, 1}}, Tuple{getfield(Zygote, Symbol("#3072#back#1192")){getfield(Zygote, Symbol("#1188#1190")){Array{Float32, 1}}}, Zygote.Pullback{Tuple{typeof(Base.Broadcast.broadcasted), Type{Float32}, Array{Float64, 1}}, Tuple{getfield(Zygote, Symbol("#331#back#173")){getfield(Zygote, Symbol("#171#172")){getfield(Zygote, Symbol("#1599#1601")), Tuple{Tuple{Nothing}, Tuple{}}}}, getfield(Zygote, Symbol("#234#back#125")){typeof(Base.identity)}, getfield(Zygote, Symbol("#331#back#173")){getfield(Zygote, Symbol("#171#172")){getfield(Zygote, Symbol("#4150#back#1670")){getfield(Zygote, Symbol("#1659#1666")){Tuple{Array{Float64, 1}}, Base.Val{2}, Array{getfield(Zygote, Symbol("#1813#back#682")){getfield(Zygote, Symbol("#680#681"))}, 1}}}, Tuple{Tuple{Nothing, Nothing, Nothing}, Tuple{}}}}, getfield(Zygote, Symbol("#3024#back#1171")){getfield(Zygote, Symbol("#1164#1168"))}, Zygote.Pullback{Tuple{typeof(Base.Broadcast.broadcastable), Array{Float64, 1}}, Tuple{}}, getfield(Zygote, Symbol("#234#back#125")){typeof(Base.identity)}}}, Zygote.Pullback{Tuple{typeof(Base.Broadcast.materialize), Array{Float32, 1}}, Tuple{}}}}, Float32})
precompile(Tuple{getfield(Zygote, Symbol("#38#39")){Zygote.Pullback{Tuple{getfield(Zygote, Symbol("#1921#1922")), Array{Float64, 1}}, Tuple{getfield(Zygote, Symbol("#3072#back#1192")){getfield(Zygote, Symbol("#1188#1190")){Array{Float32, 1}}}, Zygote.Pullback{Tuple{typeof(Base.Broadcast.broadcasted), Type{Float32}, Array{Float64, 1}}, Tuple{getfield(Zygote, Symbol("#331#back#173")){getfield(Zygote, Symbol("#171#172")){getfield(Zygote, Symbol("#1599#1601")), Tuple{Tuple{Nothing}, Tuple{}}}}, getfield(Zygote, Symbol("#234#back#125")){typeof(Base.identity)}, getfield(Zygote, Symbol("#331#back#173")){getfield(Zygote, Symbol("#171#172")){getfield(Zygote, Symbol("#4150#back#1670")){getfield(Zygote, Symbol("#1659#1666")){Tuple{Array{Float64, 1}}, Base.Val{2}, Array{getfield(Zygote, Symbol("#1813#back#682")){getfield(Zygote, Symbol("#680#681"))}, 1}}}, Tuple{Tuple{Nothing, Nothing, Nothing}, Tuple{}}}}, getfield(Zygote, Symbol("#3024#back#1171")){getfield(Zygote, Symbol("#1164#1168"))}, Zygote.Pullback{Tuple{typeof(Base.Broadcast.broadcastable), Array{Float64, 1}}, Tuple{}}, getfield(Zygote, Symbol("#234#back#125")){typeof(Base.identity)}}}, Zygote.Pullback{Tuple{typeof(Base.Broadcast.materialize), Array{Float32, 1}}, Tuple{}}}}}, Float32})
precompile(Tuple{typeof(REPL.Terminals.hascolor), REPL.Terminals.TTYTerminal})
precompile(Tuple{getfield(REPL, Symbol("##setup_interface#45")), Bool, Any, typeof(REPL.setup_interface), REPL.LineEditREPL})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, REPL.LineEdit.Prompt}, Vararg{Base.Pair{Symbol, REPL.LineEdit.Prompt}, N} where N})
precompile(Tuple{Type{REPL.REPLHistoryProvider}, Any})
precompile(Tuple{Type{REPL.REPLHistoryProvider}, Any, Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.peek), Base.IOStream})
precompile(Tuple{Type{Char}, Int32})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#44#75"))}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.ncodeunits), String})
precompile(Tuple{typeof(Base.convert), Type{Any}, Char})
precompile(Tuple{typeof(Base.convert), Type{Any}, REPL.LineEdit.KeyAlias})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.Dict{Char, Any}})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#73#104")){REPL.LineEdit.HistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, getfield(REPL, Symbol("#49#58")){REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#248#252")){REPL.LineEdit.PrefixHistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, getfield(REPL, Symbol("#39#42")){REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.getindex), Array{REPL.LineEdit.TextInterface, 1}, Int64})
precompile(Tuple{typeof(Base.vect), Base.Dict{Any, Any}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Dict{Any, Any}, Base.Dict{Char, Any}})
precompile(Tuple{Type{Array{Base.Dict{K, Any} where K, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Dict{K, Any} where K, 1}, Tuple{Base.Dict{Any, Any}, Base.Dict{Char, Any}}})
precompile(Tuple{typeof(Base.reverse), Array{Base.Dict{K, Any} where K, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.reverse), Array{Base.Dict{K, Any} where K, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Base.Dict{K, Any} where K, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(REPL.LineEdit.normalize_keys), Array{Base.Dict{K, Any} where K, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Dict{Any, Any}, 1}, Base.Dict{Any, Any}, Base.Generator{Array{Base.Dict{K, Any} where K, 1}, typeof(REPL.LineEdit.normalize_keys)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Base.Dict{K, Any} where K, 1}, Base.Generator{Array{Base.Dict{K, Any} where K, 1}, typeof(REPL.LineEdit.normalize_keys)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Base.Dict{K, Any} where K, 1}, Base.Generator{Array{Base.Dict{K, Any} where K, 1}, typeof(REPL.LineEdit.normalize_keys)}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Char, Any}, String})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, getfield(OhMyREPL, Symbol("#2#5")){REPL.LineEdit.PrefixHistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.vect), Base.Dict{String, Function}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.convert), Type{Any}, REPL.REPLHistoryProvider})
precompile(Tuple{typeof(Base.:(==)), Gadfly.GadflyDisplay, REPL.REPLDisplay{REPL.LineEditREPL}})
precompile(Tuple{typeof(Base.:(==)), Media.DisplayHook, REPL.REPLDisplay{REPL.LineEditREPL}})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(OhMyREPL.Prompt, Symbol("#2#27")), String}, Any, Any})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.unsafe_write), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.seekstart), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Type{Tokenize.Lexers.Lexer{IO_t, T} where T<:Tokenize.Tokens.AbstractToken where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.collect), Tokenize.Lexers.Lexer{Base.GenericIOBuffer{Array{UInt8, 1}}, Tokenize.Tokens.Token}})
precompile(Tuple{OhMyREPL.Passes.SyntaxHighlighter.SyntaxHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(Base.to_index), Array{Int64, 1}, Nothing})
precompile(Tuple{typeof(Base.to_index), Array{Tokenize.Tokens.Kind, 1}, Nothing})
precompile(Tuple{typeof(OhMyREPL.Passes.BracketHighlighter.bracket_match), Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{OhMyREPL.Passes.BracketHighlighter.BracketHighlighterSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{typeof(OhMyREPL.Passes.RainbowBrackets.get_color), OhMyREPL.Passes.RainbowBrackets.RainbowBracketsSettings, Tokenize.Tokens.Kind, Int64})
precompile(Tuple{OhMyREPL.Passes.RainbowBrackets.RainbowBracketsSettings, Array{Crayons.Crayon, 1}, Array{Tokenize.Tokens.Token, 1}, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##readline")), NamedTuple{(:keep,), Tuple{Bool}}, typeof(Base.readline), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.flush), REPL.Terminals.TTYTerminal})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Tokenize.Tokens.Kind, Symbol}, Tokenize.Tokens.Kind})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.setmark), REPL.LineEdit.MIState, Bool})
precompile(Tuple{typeof(REPL.LineEdit.set_action!), REPL.LineEdit.MIState, Symbol})
precompile(Tuple{typeof(REPL.LineEdit.complete_line), REPL.LineEdit.MIState})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#25#50")), Any, Any, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##edit_splice!#18")), Bool, typeof(REPL.LineEdit.edit_splice!), Any, Base.Pair{#s627, #s626} where #s626<:Integer where #s627<:Integer, AbstractString})
precompile(Tuple{typeof(REPL.LineEdit.edit_splice!), Any, Base.Pair{#s627, #s626} where #s626<:Integer where #s627<:Integer, AbstractString})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(OhMyREPL.BracketInserter, Symbol("#1#8")){Array{Char, 1}, Char, Char}, String}, Any, Any})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#1#8")){Array{Char, 1}, Char, Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any, N} where N})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(OhMyREPL.BracketInserter, Symbol("#5#12")){Char}, String}, Any, Any})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#5#12")){Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any, N} where N})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(OhMyREPL.Prompt, Symbol("#22#47")), String}, Any, Any})
precompile(Tuple{getfield(OhMyREPL.Prompt, Symbol("#22#47")), Any, Any, Any})
precompile(Tuple{getfield(Pkg.REPLMode, Symbol("#@pkg_str")), LineNumberNode, Module, String})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Pkg.REPLMode.MiniREPL}})
precompile(Tuple{Type{NamedTuple{(:do_rethrow,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Pkg.REPLMode.do_cmd!), Pkg.REPLMode.Command, Pkg.REPLMode.MiniREPL})
precompile(Tuple{getfield(Pkg.REPLMode, Symbol("##do_cmd#23")), Bool, typeof(Pkg.REPLMode.do_cmd), Pkg.REPLMode.MiniREPL, String})
precompile(Tuple{getfield(Pkg.REPLMode, Symbol("#kw##do_cmd")), NamedTuple{(:do_rethrow,), Tuple{Bool}}, typeof(Pkg.REPLMode.do_cmd), Pkg.REPLMode.MiniREPL, String})
precompile(Tuple{typeof(Base.convert), Type{Any}, Pkg.TOML.Table})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{String, 1}})
precompile(Tuple{typeof(Base.setproperty!), Pkg.Types.Project, Symbol, Base.VersionNumber})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Pkg.Types.UpgradeLevel, Base.VersionNumber, Pkg.Types.VersionSpec}}, Base.VersionNumber})
precompile(Tuple{typeof(Base.vect), String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), String, Base.UUID, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.UUID, Base.VersionNumber})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{String, Base.UUID, Base.VersionNumber}})
precompile(Tuple{typeof(Base.any), Function, Array{Any, 1}})
precompile(Tuple{getfield(Base, Symbol("##any#596")), Function, typeof(Base.any), Function, Array{Any, 1}})
precompile(Tuple{typeof(Base._any), getfield(Pkg.Types, Symbol("#58#59")), Array{Any, 1}, Base.Colon})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Base.setproperty!), Pkg.Types.PackageEntry, Symbol, Base.VersionNumber})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Base.VersionNumber}}, Base.VersionNumber})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Base.SHA1}}, Base.SHA1})
precompile(Tuple{Type{Base.VersionNumber}, UInt32, UInt32, UInt32, Tuple{UInt64}, Tuple{UInt64}})
precompile(Tuple{Type{Base.VersionNumber}, UInt32, UInt32, UInt32, Tuple{}, Tuple{UInt64}})
precompile(Tuple{Type{Pkg.Types.EnvCache}, Nothing, String, String, String, Pkg.Types.PackageSpec, Pkg.Types.Project, Base.Dict{Base.UUID, Pkg.Types.PackageEntry}, Base.Dict{String, Array{Base.UUID, 1}}, Base.Dict{Base.UUID, Array{String, 1}}, Base.Dict{Base.UUID, Array{String, 1}}})
precompile(Tuple{typeof(Metalhead.__init__)})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Symbol, Symbol}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Mux.toresponse), getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#28#29")){Array{Base.SubString{String}, 1}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#48#51")){Bool, getfield(Mux, Symbol("#absdir#50"))}, getfield(Mux, Symbol("#49#52")){getfield(Mux, Symbol("#absdir#50"))}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#28#29")){Array{Base.SubString{String}, 1}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#43#46")){Bool, getfield(Mux, Symbol("#absdir#45")){Array{String, 1}}}, getfield(Mux, Symbol("#44#47")){getfield(Mux, Symbol("#absdir#45")){Array{String, 1}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Blink, Symbol("#14#16")), getfield(Blink, Symbol("#15#17"))}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#30#31")){Array{Base.SubString{String}, 1}}, typeof(Blink.page_handler)}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}}}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Mux.splitquery), getfield(Mux, Symbol("#1#2")){typeof(Mux.toresponse), getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#28#29")){Array{Base.SubString{String}, 1}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#48#51")){Bool, getfield(Mux, Symbol("#absdir#50"))}, getfield(Mux, Symbol("#49#52")){getfield(Mux, Symbol("#absdir#50"))}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#28#29")){Array{Base.SubString{String}, 1}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#43#46")){Bool, getfield(Mux, Symbol("#absdir#45")){Array{String, 1}}}, getfield(Mux, Symbol("#44#47")){getfield(Mux, Symbol("#absdir#45")){Array{String, 1}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Blink, Symbol("#14#16")), getfield(Blink, Symbol("#15#17"))}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#30#31")){Array{Base.SubString{String}, 1}}, typeof(Blink.page_handler)}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}}}}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Mux.basiccatch), getfield(Mux, Symbol("#1#2")){typeof(Mux.splitquery), getfield(Mux, Symbol("#1#2")){typeof(Mux.toresponse), getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#28#29")){Array{Base.SubString{String}, 1}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#48#51")){Bool, getfield(Mux, Symbol("#absdir#50"))}, getfield(Mux, Symbol("#49#52")){getfield(Mux, Symbol("#absdir#50"))}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#28#29")){Array{Base.SubString{String}, 1}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#43#46")){Bool, getfield(Mux, Symbol("#absdir#45")){Array{String, 1}}}, getfield(Mux, Symbol("#44#47")){getfield(Mux, Symbol("#absdir#45")){Array{String, 1}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Blink, Symbol("#14#16")), getfield(Blink, Symbol("#15#17"))}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#30#31")){Array{Base.SubString{String}, 1}}, typeof(Blink.page_handler)}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}}}}}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Mux.todict), getfield(Mux, Symbol("#1#2")){typeof(Mux.basiccatch), getfield(Mux, Symbol("#1#2")){typeof(Mux.splitquery), getfield(Mux, Symbol("#1#2")){typeof(Mux.toresponse), getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#28#29")){Array{Base.SubString{String}, 1}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#48#51")){Bool, getfield(Mux, Symbol("#absdir#50"))}, getfield(Mux, Symbol("#49#52")){getfield(Mux, Symbol("#absdir#50"))}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#28#29")){Array{Base.SubString{String}, 1}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#43#46")){Bool, getfield(Mux, Symbol("#absdir#45")){Array{String, 1}}}, getfield(Mux, Symbol("#44#47")){getfield(Mux, Symbol("#absdir#45")){Array{String, 1}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Blink, Symbol("#14#16")), getfield(Blink, Symbol("#15#17"))}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#5#6")){getfield(Mux, Symbol("#30#31")){Array{Base.SubString{String}, 1}}, typeof(Blink.page_handler)}, getfield(Mux, Symbol("#1#2")){getfield(Mux, Symbol("#18#19")){getfield(Mux, Symbol("#22#23")){Symbol, Int64}}, getfield(Mux, Symbol("#20#21")){String}}}}}}}}}, HTTP.Messages.Request})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, Int64}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{getfield(BSON, Symbol("#@save")), LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{getfield(Base, Symbol("#@show")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Int64, String}}, Base.Pair{Int64, String}, Vararg{Base.Pair{Int64, String}, N} where N})
precompile(Tuple{Type{Base.Dict{Union{String, Symbol}, Any}}, Base.Pair{Symbol, String}, Vararg{Base.Pair{Symbol, String}, N} where N})
precompile(Tuple{typeof(Widgets.node), WebIO.DOM, WebIO.Node{WebIO.DOM}, Vararg{WebIO.Node{WebIO.DOM}, N} where N})
precompile(Tuple{Type{WebIO.Node{T} where T}, WebIO.DOM, WebIO.Node{WebIO.DOM}, Vararg{WebIO.Node{WebIO.DOM}, N} where N})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.vect), Base.Pair{String, Observables.Observable{Int64}}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Tuple{typeof(Main.pixels), String}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Tuple{typeof(Main.feet), String}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Tuple{typeof(Main.meters), String}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Base.Pair{String, Tuple{typeof(Main.pixels), String}}, Vararg{Base.Pair{String, B} where B, N} where N})
precompile(Tuple{Type{OrderedCollections.OrderedDict{String, Any}}, Tuple{Base.Pair{String, Tuple{typeof(Main.pixels), String}}, Base.Pair{String, Tuple{typeof(Main.feet), String}}, Base.Pair{String, Tuple{typeof(Main.meters), String}}}})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{String, Any}, Tuple{typeof(Main.pixels), String}, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, Tuple{typeof(Main.pixels), String}, String})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{String, Any}, Tuple{typeof(Main.feet), String}, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, Tuple{typeof(Main.feet), String}, String})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{String, Any}, Tuple{typeof(Main.meters), String}, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, Tuple{typeof(Main.meters), String}, String})
precompile(Tuple{typeof(Base.hash), Tuple{typeof(Main.pixels), String}, UInt64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Int64}, Tuple{typeof(Main.pixels), String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Int64}, Int64, Tuple{typeof(Main.pixels), String}})
precompile(Tuple{typeof(Base.hash), Tuple{typeof(Main.feet), String}, UInt64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Int64}, Tuple{typeof(Main.feet), String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Int64}, Int64, Tuple{typeof(Main.feet), String}})
precompile(Tuple{typeof(Base.hash), Tuple{typeof(Main.meters), String}, UInt64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Int64}, Tuple{typeof(Main.meters), String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Int64}, Int64, Tuple{typeof(Main.meters), String}})
precompile(Tuple{getfield(InteractBase, Symbol("##initvalueindex#131")), Bool, Tuple{typeof(Main.pixels), String}, Bool, typeof(InteractBase.initvalueindex), InteractBase.Automatic, Nothing, Observables.Observable{Any}})
precompile(Tuple{getfield(InteractBase, Symbol("#125#128")){Observables.Observable{Any}, typeof(Base.get)}, Tuple{typeof(Main.pixels), String}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Int64}, Tuple{typeof(Main.pixels), String}})
precompile(Tuple{typeof(Base.get), InteractBase.Vals2Idxs{Any}, Tuple{typeof(Main.pixels), String}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Base.Pair{String, Tuple{typeof(ImageSegmentation.fast_scanning), DataType}}, Vararg{Base.Pair{String, B} where B, N} where N})
precompile(Tuple{typeof(Base.isequal), Tuple{typeof(ImageSegmentation.seeded_region_growing), DataType}, Tuple{typeof(ImageSegmentation.fast_scanning), DataType}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Tuple{typeof(Main.prune_min_size), DataType, DataType}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Tuple{typeof(Main.remove_segments), DataType}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Tuple{typeof(Main.launch_space_editor), DataType}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Base.Pair{String, Tuple{typeof(Main.prune_min_size), DataType, DataType}}, Vararg{Base.Pair{String, B} where B, N} where N})
precompile(Tuple{Type{OrderedCollections.OrderedDict{String, Any}}, Tuple{Base.Pair{String, Tuple{typeof(Main.prune_min_size), DataType, DataType}}, Base.Pair{String, Tuple{typeof(Main.remove_segments), DataType}}, Base.Pair{String, Tuple{typeof(Main.launch_space_editor), DataType}}}})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{String, Any}, Tuple{typeof(Main.prune_min_size), DataType, DataType}, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, Tuple{typeof(Main.prune_min_size), DataType, DataType}, String})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{String, Any}, Tuple{typeof(Main.remove_segments), DataType}, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, Tuple{typeof(Main.remove_segments), DataType}, String})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{String, Any}, Tuple{typeof(Main.launch_space_editor), DataType}, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, Tuple{typeof(Main.launch_space_editor), DataType}, String})
precompile(Tuple{typeof(Base.hash), Tuple{typeof(Main.prune_min_size), DataType, DataType}, UInt64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Int64}, Tuple{typeof(Main.prune_min_size), DataType, DataType}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Int64}, Int64, Tuple{typeof(Main.prune_min_size), DataType, DataType}})
precompile(Tuple{typeof(Base.hash), Tuple{typeof(Main.remove_segments), DataType}, UInt64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Int64}, Tuple{typeof(Main.remove_segments), DataType}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Int64}, Int64, Tuple{typeof(Main.remove_segments), DataType}})
precompile(Tuple{typeof(Base.hash), Tuple{typeof(Main.launch_space_editor), DataType}, UInt64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Int64}, Tuple{typeof(Main.launch_space_editor), DataType}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Int64}, Int64, Tuple{typeof(Main.launch_space_editor), DataType}})
precompile(Tuple{getfield(InteractBase, Symbol("##initvalueindex#131")), Bool, Tuple{typeof(Main.prune_min_size), DataType, DataType}, Bool, typeof(InteractBase.initvalueindex), InteractBase.Automatic, Nothing, Observables.Observable{Any}})
precompile(Tuple{getfield(InteractBase, Symbol("#125#128")){Observables.Observable{Any}, typeof(Base.get)}, Tuple{typeof(Main.prune_min_size), DataType, DataType}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Int64}, Tuple{typeof(Main.prune_min_size), DataType, DataType}})
precompile(Tuple{typeof(Base.get), InteractBase.Vals2Idxs{Any}, Tuple{typeof(Main.prune_min_size), DataType, DataType}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Tuple{typeof(Main.export_CSV), DataType}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Tuple{typeof(Main.export_session_data), DataType}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Base.Pair{String, Tuple{typeof(Main.export_CSV), DataType}}, Vararg{Base.Pair{String, B} where B, N} where N})
precompile(Tuple{Type{OrderedCollections.OrderedDict{String, Any}}, Tuple{Base.Pair{String, Tuple{typeof(Main.export_CSV), DataType}}, Base.Pair{String, Tuple{typeof(Main.export_session_data), DataType}}}})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{String, Any}, Tuple{typeof(Main.export_CSV), DataType}, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, Tuple{typeof(Main.export_CSV), DataType}, String})
precompile(Tuple{typeof(OrderedCollections._setindex!), OrderedCollections.OrderedDict{String, Any}, Tuple{typeof(Main.export_session_data), DataType}, String, Int64})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{String, Any}, Tuple{typeof(Main.export_session_data), DataType}, String})
precompile(Tuple{typeof(Base.hash), Tuple{typeof(Main.export_CSV), DataType}, UInt64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Int64}, Tuple{typeof(Main.export_CSV), DataType}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Int64}, Int64, Tuple{typeof(Main.export_CSV), DataType}})
precompile(Tuple{typeof(Base.hash), Tuple{typeof(Main.export_session_data), DataType}, UInt64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Int64}, Tuple{typeof(Main.export_session_data), DataType}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Int64}, Int64, Tuple{typeof(Main.export_session_data), DataType}})
precompile(Tuple{getfield(InteractBase, Symbol("##initvalueindex#131")), Bool, Tuple{typeof(Main.export_CSV), DataType}, Bool, typeof(InteractBase.initvalueindex), InteractBase.Automatic, Nothing, Observables.Observable{Any}})
precompile(Tuple{getfield(InteractBase, Symbol("#125#128")){Observables.Observable{Any}, typeof(Base.get)}, Tuple{typeof(Main.export_CSV), DataType}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Int64}, Tuple{typeof(Main.export_CSV), DataType}})
precompile(Tuple{typeof(Base.get), InteractBase.Vals2Idxs{Any}, Tuple{typeof(Main.export_CSV), DataType}})
precompile(Tuple{typeof(Base.isequal), Observables.Observable{String}, Observables.Observable{Any}})
precompile(Tuple{Type{Base.Pair{typeof(Main.prune_min_size), String}}, Any, Any})
precompile(Tuple{Type{Base.Pair{typeof(Main.remove_segments), String}}, Any, Any})
precompile(Tuple{Type{Base.Pair{typeof(Main.feet), String}}, Any, Any})
precompile(Tuple{Type{Base.Pair{typeof(Main.meters), String}}, Any, Any})
precompile(Tuple{Type{Base.Pair{typeof(Main.pixels), String}}, Any, Any})
precompile(Tuple{Type{Base.Pair{typeof(Main.launch_space_editor), String}}, Any, Any})
precompile(Tuple{Type{Base.Pair{typeof(Main.export_CSV), String}}, Any, Any})
precompile(Tuple{Type{Base.Pair{typeof(Main.export_session_data), String}}, Any, Any})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{typeof(ImageSegmentation.fast_scanning), String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{typeof(ImageSegmentation.fast_scanning), String}, Base.Pair{typeof(ImageSegmentation.felzenszwalb), String}, Base.Pair{typeof(Main.prune_min_size), String}, Base.Pair{typeof(Main.remove_segments), String}, Base.Pair{typeof(ImageSegmentation.seeded_region_growing), String}, Base.Pair{typeof(Main.feet), String}, Base.Pair{typeof(Main.meters), String}, Base.Pair{typeof(Main.pixels), String}, Base.Pair{typeof(Main.launch_space_editor), String}, Base.Pair{typeof(Main.export_CSV), String}, Base.Pair{typeof(Main.export_session_data), String}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{typeof(ImageSegmentation.fast_scanning), String}, Base.Pair{typeof(ImageSegmentation.felzenszwalb), String}, Base.Pair{typeof(Main.prune_min_size), String}, Base.Pair{typeof(Main.remove_segments), String}, Base.Pair{typeof(ImageSegmentation.seeded_region_growing), String}, Base.Pair{typeof(Main.feet), String}, Base.Pair{typeof(Main.meters), String}, Base.Pair{typeof(Main.pixels), String}, Base.Pair{typeof(Main.launch_space_editor), String}, Base.Pair{typeof(Main.export_CSV), String}, Base.Pair{typeof(Main.export_session_data), String}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{typeof(ImageSegmentation.fast_scanning), String}, Base.Pair{typeof(ImageSegmentation.felzenszwalb), String}, Base.Pair{typeof(Main.prune_min_size), String}, Base.Pair{typeof(Main.remove_segments), String}, Base.Pair{typeof(ImageSegmentation.seeded_region_growing), String}, Base.Pair{typeof(Main.feet), String}, Base.Pair{typeof(Main.meters), String}, Base.Pair{typeof(Main.pixels), String}, Base.Pair{typeof(Main.launch_space_editor), String}, Base.Pair{typeof(Main.export_CSV), String}, Base.Pair{typeof(Main.export_session_data), String}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{typeof(ImageSegmentation.fast_scanning), String}, Tuple{Base.Pair{typeof(ImageSegmentation.fast_scanning), String}, Base.Pair{typeof(ImageSegmentation.felzenszwalb), String}, Base.Pair{typeof(Main.prune_min_size), String}, Base.Pair{typeof(Main.remove_segments), String}, Base.Pair{typeof(ImageSegmentation.seeded_region_growing), String}, Base.Pair{typeof(Main.feet), String}, Base.Pair{typeof(Main.meters), String}, Base.Pair{typeof(Main.pixels), String}, Base.Pair{typeof(Main.launch_space_editor), String}, Base.Pair{typeof(Main.export_CSV), String}, Base.Pair{typeof(Main.export_session_data), String}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Function, String}, Tuple{Base.Pair{typeof(ImageSegmentation.fast_scanning), String}, Base.Pair{typeof(ImageSegmentation.felzenszwalb), String}, Base.Pair{typeof(Main.prune_min_size), String}, Base.Pair{typeof(Main.remove_segments), String}, Base.Pair{typeof(ImageSegmentation.seeded_region_growing), String}, Base.Pair{typeof(Main.feet), String}, Base.Pair{typeof(Main.meters), String}, Base.Pair{typeof(Main.pixels), String}, Base.Pair{typeof(Main.launch_space_editor), String}, Base.Pair{typeof(Main.export_CSV), String}, Base.Pair{typeof(Main.export_session_data), String}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Function, String}, String, typeof(Main.prune_min_size)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Function, String}, String, typeof(Main.remove_segments)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Function, String}, String, typeof(Main.feet)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Function, String}, String, typeof(Main.meters)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Function, String}, String, typeof(Main.pixels)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Function, String}, String, typeof(Main.launch_space_editor)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Function, String}, String, typeof(Main.export_CSV)})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Function, String}, String, typeof(Main.export_session_data)})
precompile(Tuple{typeof(Base.vect), Base.Pair{String, Observables.Observable{Array{String, 1}}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Pair{String, Observables.Observable{Array{String, 1}}}, Base.Pair{String, Observables.Observable{Any}}, Vararg{Base.Pair{String, Observables.Observable{Any}}, N} where N})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, Array{Ptr{FreeType.FT_FaceRec}, 1}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(CSSUtil.hbox), WebIO.Node{WebIO.DOM}, WebIO.Node{WebIO.DOM}, Vararg{WebIO.Node{WebIO.DOM}, N} where N})
precompile(Tuple{getfield(WebIO, Symbol("#dom#13")){getfield(WebIO, Symbol("#dom#12#14")){Base.Dict{Any, Any}, WebIO.DOM}}, WebIO.Node{WebIO.DOM}, Vararg{WebIO.Node{WebIO.DOM}, N} where N})
precompile(Tuple{typeof(Base.vect), WebIO.Node{WebIO.DOM}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Widgets.Widget{:button, Int64}, WebIO.Node{WebIO.DOM}, Vararg{WebIO.Node{WebIO.DOM}, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), WebIO.Node{WebIO.DOM}, WebIO.Node{WebIO.DOM}, Vararg{WebIO.Node{WebIO.DOM}, N} where N})
precompile(Tuple{typeof(CSSUtil.hbox), Widgets.Widget{:checkbox, Bool}, Widgets.Widget{:checkbox, Bool}, Vararg{Widgets.Widget{:checkbox, Bool}, N} where N})
precompile(Tuple{typeof(CSSUtil.hbox), Widgets.Widget{:tabs, Any}, WebIO.Node{WebIO.DOM}, Vararg{WebIO.Node{WebIO.DOM}, N} where N})
precompile(Tuple{typeof(Base.vect), Widgets.Widget{:tabs, Any}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Widgets.Widget{:tabs, Any}, WebIO.Node{WebIO.DOM}, Vararg{WebIO.Node{WebIO.DOM}, N} where N})
precompile(Tuple{typeof(CSSUtil.vbox), WebIO.Node{WebIO.DOM}, WebIO.Node{WebIO.DOM}, Vararg{WebIO.Node{WebIO.DOM}, N} where N})
precompile(Tuple{typeof(Widgets.node), Symbol, WebIO.Node{WebIO.DOM}, Vararg{WebIO.Node{WebIO.DOM}, N} where N})
precompile(Tuple{Type{WebIO.Node{T} where T}, Symbol, WebIO.Node{WebIO.DOM}, Vararg{WebIO.Node{WebIO.DOM}, N} where N})
precompile(Tuple{getfield(BSON, Symbol("#@load")), LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(BSON.constructtype), Type{T} where T, Array{Any, 1}})
precompile(Tuple{typeof(BSON.ismutable), Type{T} where T})
precompile(Tuple{typeof(Base.cconvert), Type{T} where T, Bool})
precompile(Tuple{typeof(Base.cconvert), Type{T} where T, Int32})
precompile(Tuple{typeof(BSON.newstruct_raw), Base.IdDict{Any, Any}, Type{T} where T, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{getfield(BSON.__deserialized_types__, Symbol("#48#67"))}})
precompile(Tuple{typeof(BSON.initstruct), Type{T} where T})
precompile(Tuple{typeof(BSON.constructtype), Type{T} where T, Array{Int64, 1}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{getfield(BSON.__deserialized_types__, Symbol("#49#68"))}})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{getfield(BSON.__deserialized_types__, Symbol("#50#69")){c_17, c_20} where c_20 where c_17}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{getfield(BSON.__deserialized_types__, Symbol("#51#70"))}})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{getfield(BSON.__deserialized_types__, Symbol("#52#71")){c_15, c_21} where c_21 where c_15}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{getfield(BSON.__deserialized_types__, Symbol("#53#72"))}})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{getfield(BSON.__deserialized_types__, Symbol("#54#73")){c_13, c_22} where c_22 where c_13}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{getfield(BSON.__deserialized_types__, Symbol("#55#74"))}})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{getfield(BSON.__deserialized_types__, Symbol("#56#75")){c_11, c_23} where c_23 where c_11}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{getfield(BSON.__deserialized_types__, Symbol("#57#76"))}})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{getfield(BSON.__deserialized_types__, Symbol("#58#77")){c_9, c_24} where c_24 where c_9}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{getfield(BSON.__deserialized_types__, Symbol("#59#78"))}})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{getfield(BSON.__deserialized_types__, Symbol("#60#79")){c_7, c_25} where c_25 where c_7}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{getfield(BSON.__deserialized_types__, Symbol("#61#80"))}})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{getfield(BSON.__deserialized_types__, Symbol("#62#81")){c_5, c_26} where c_26 where c_5}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{getfield(BSON.__deserialized_types__, Symbol("#63#82"))}})
precompile(Tuple{typeof(Base.convert), Type{UnionAll}, Type{getfield(BSON.__deserialized_types__, Symbol("#64#83")){c_3, c_27} where c_27 where c_3}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{getfield(BSON.__deserialized_types__, Symbol("#65#84"))}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{getfield(BSON.__deserialized_types__, Symbol("#66#85"))}})
precompile(Tuple{typeof(Base.convert), Type{DataType}, Type{Tuple{Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#48#67")), Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#49#68")), getfield(BSON.__deserialized_types__, Symbol("#50#69")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#51#70")), getfield(BSON.__deserialized_types__, Symbol("#52#71")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#53#72")), getfield(BSON.__deserialized_types__, Symbol("#54#73")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#55#74")), getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}}})
precompile(Tuple{typeof(BSON.newstruct), Type{T} where T, Tuple{Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#48#67")), Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#49#68")), getfield(BSON.__deserialized_types__, Symbol("#50#69")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#51#70")), getfield(BSON.__deserialized_types__, Symbol("#52#71")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#53#72")), getfield(BSON.__deserialized_types__, Symbol("#54#73")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#55#74")), getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}})
precompile(Tuple{typeof(Base.convert), Type{Tuple{Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#48#67")), Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#49#68")), getfield(BSON.__deserialized_types__, Symbol("#50#69")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#51#70")), getfield(BSON.__deserialized_types__, Symbol("#52#71")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#53#72")), getfield(BSON.__deserialized_types__, Symbol("#54#73")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#55#74")), getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}}, Tuple{Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#48#67")), Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#49#68")), getfield(BSON.__deserialized_types__, Symbol("#50#69")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#51#70")), getfield(BSON.__deserialized_types__, Symbol("#52#71")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#53#72")), getfield(BSON.__deserialized_types__, Symbol("#54#73")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#55#74")), getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Flux.Chain{Tuple{Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#48#67")), Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#49#68")), getfield(BSON.__deserialized_types__, Symbol("#50#69")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#51#70")), getfield(BSON.__deserialized_types__, Symbol("#52#71")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#53#72")), getfield(BSON.__deserialized_types__, Symbol("#54#73")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#55#74")), getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}}, Symbol})
precompile(Tuple{getfield(Juno, Symbol("#@progress")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{getfield(Base.CoreLogging, Symbol("#@logmsg")), LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Dict{String, Any}}, Base.Pair{String, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, Bool}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.vect), JSExpr.F, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.vect), Expr, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.similar), Array{JSExpr.F, 1}, Type{T} where T})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Symbol, Array{UInt8, 1}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Symbol, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{getfield(Main, Symbol("#44#45")), Array{Any, 1}})
precompile(Tuple{typeof(Base.methods), Any})
precompile(Tuple{typeof(ImageMagick.load), FileIO.File{#s18} where #s18<:(FileIO.DataFormat{sym} where sym)})
precompile(Tuple{getfield(ImageMagick, Symbol("##exportimagepixels!#27")), Int64, Int64, typeof(ImageMagick.exportimagepixels!), AbstractArray{#s17, N} where N where #s17<:Union{Bool, Unsigned}, ImageMagick.MagickWand, String, String})
precompile(Tuple{typeof(ImageMagick.exportimagepixels!), AbstractArray{#s17, N} where N where #s17<:Union{Bool, Unsigned}, ImageMagick.MagickWand, String, String})
precompile(Tuple{Type{ColorTypes.GrayA{Float16}}, Float64, Float64})
precompile(Tuple{typeof(Base.collect_to!), Array{ColorTypes.GrayA{Float16}, 2}, Base.Generator{Array{ColorTypes.GrayA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, getfield(Main, Symbol("#3#4")){Float64, Float64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{ColorTypes.GrayA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, getfield(Main, Symbol("#3#4")){Float64, Float64}}})
precompile(Tuple{typeof(Main.make_transparent), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Float64, Float64})
precompile(Tuple{typeof(Main.make_transparent), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Array{ColorTypes.GrayA{Float16}, 2}, String})
precompile(Tuple{typeof(FileIO.save), String, Array{ColorTypes.GrayA{Float16}, 2}})
precompile(Tuple{typeof(ImageMagick.save), FileIO.File{#s18} where #s18<:(FileIO.DataFormat{sym} where sym), Any})
precompile(Tuple{typeof(Base.map), Function, Array{ColorTypes.GrayA{Float16}, 2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(ImageMagick, Symbol("#42#43")){typeof(Base.identity)}, Array{ColorTypes.GrayA{Float16}, 2}})
precompile(Tuple{typeof(Base.eltype), Type{C}} where C<:(ColorTypes.Colorant{T, N} where N where T))
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.Colorant{T, N}}} where N where T)
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.ColorAlpha{ColorTypes.Gray{Float16}, Float16, 2}}})
precompile(Tuple{typeof(Base.eltype), Type{ColorTypes.GrayA{Float16}}})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.ColorAlpha{ColorTypes.Gray{Float16}, Float16, 2}}})
precompile(Tuple{typeof(ColorTypes.color_type), Type{ColorTypes.GrayA{Float16}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{ColorTypes.GrayA{FixedPointNumbers.Normed{UInt8, 8}}, 2}, ColorTypes.GrayA{FixedPointNumbers.Normed{UInt8, 8}}, Base.Generator{Array{ColorTypes.GrayA{Float16}, 2}, getfield(ImageMagick, Symbol("#42#43")){typeof(Base.identity)}}, Int64})
precompile(Tuple{typeof(Base._collect), Array{ColorTypes.GrayA{Float16}, 2}, Base.Generator{Array{ColorTypes.GrayA{Float16}, 2}, getfield(ImageMagick, Symbol("#42#43")){typeof(Base.identity)}}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_similar), Array{ColorTypes.GrayA{Float16}, 2}, Base.Generator{Array{ColorTypes.GrayA{Float16}, 2}, getfield(ImageMagick, Symbol("#42#43")){typeof(Base.identity)}}})
precompile(Tuple{typeof(Main.get_dummy), String, String, Array{ColorTypes.GrayA{Float16}, 2}})
precompile(Tuple{getfield(Main, Symbol("#54#55")), String})
precompile(Tuple{getfield(Observables, Symbol("##setindex!#1")), getfield(Base, Symbol("#58#59")){Base.Fix2{typeof(Base.in), Array{Function, 1}}}, typeof(Base.setindex!), Observables.Observable{Any}, Tuple{typeof(Main.feet), String}})
precompile(Tuple{getfield(Base, Symbol("#kw##setindex!")), NamedTuple{(:notify,), Tuple{getfield(Base, Symbol("#58#59")){Base.Fix2{typeof(Base.in), Array{Function, 1}}}}}, typeof(Base.setindex!), Observables.Observable{Any}, Tuple{typeof(Main.feet), String}})
precompile(Tuple{getfield(Main, Symbol("#64#65")), Nothing})
precompile(Tuple{getfield(Main, Symbol("#54#55")), Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Base.SubString{String}, 1}, getfield(Main, Symbol("#20#22"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Base.SubString{String}, 1}, getfield(Main, Symbol("#20#22"))}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Base.SubString{String}, 1}, getfield(Main, Symbol("#21#23"))}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Base.SubString{String}, 1}, getfield(Main, Symbol("#21#23"))}})
precompile(Tuple{typeof(Main.parse_input), String, String})
precompile(Tuple{typeof(Base.collect_to!), Array{ColorTypes.GrayA{Float16}, 2}, Base.Generator{Array{ColorTypes.GrayA{Float64}, 2}, getfield(Main, Symbol("#3#4")){Float64, Float64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{ColorTypes.GrayA{Float64}, 2}, getfield(Main, Symbol("#3#4")){Float64, Float64}}})
precompile(Tuple{typeof(Main.make_transparent), Array{Float64, 2}, Float64, Float64})
precompile(Tuple{typeof(Main.make_seeds_img), Array{Tuple{Base.IteratorsMD.CartesianIndex{2}, Int64}, 1}, Int64, Int64, Array{Ptr{FreeType.FT_FaceRec}, 1}, Int64})
precompile(Tuple{getfield(Main, Symbol("#56#60")), Array{Any, 1}})
precompile(Tuple{typeof(Main.calc_scale), Array{Tuple{Base.IteratorsMD.CartesianIndex{2}, Int64}, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Any, Any}, Base.IdDict{Any, Any}})
precompile(Tuple{Type{Base.Dict{Symbol, Base.Dict{Any, Any}}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Base.Dict{Any, Any}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Base.Dict{Any, Any}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Base.Dict{Any, Any}}, Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Main.export_session_data), Blink.AtomShell.Window, Array{Base.Dict{Any, Any}, 1}, Base.Dict{Any, Any}})
precompile(Tuple{getfield(Main, Symbol("#52#53")), Nothing})
precompile(Tuple{getfield(Main, Symbol("#46#49")), Nothing})
precompile(Tuple{getfield(Main, Symbol("#47#50")){String}})
precompile(Tuple{getfield(Main, Symbol("#48#51")){String}})
precompile(Tuple{getfield(Main, Symbol("#64#65")), Array{Any, 1}})
precompile(Tuple{typeof(Main.segment_img), String, Float64, typeof(ImageSegmentation.fast_scanning)})
precompile(Tuple{typeof(Main.get_random_color), Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Base.Generator{Array{Int64, 2}, getfield(Main, Symbol("#7#9"))}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Int64, 2}, Base.Generator{Array{Int64, 2}, getfield(Main, Symbol("#7#9"))}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_to!), Array{ColorTypes.Gray{Float64}, 2}, Base.Generator{Array{Int64, 2}, getfield(Main, Symbol("#8#10")){ImageSegmentation.SegmentedImage{Array{Int64, 2}, ColorTypes.Gray{Float64}}}}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{Int64, 2}, Base.Generator{Array{Int64, 2}, getfield(Main, Symbol("#8#10")){ImageSegmentation.SegmentedImage{Array{Int64, 2}, ColorTypes.Gray{Float64}}}}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Main.make_segs_img), ImageSegmentation.SegmentedImage{Array{Int64, 2}, ColorTypes.Gray{Float64}}, Bool})
precompile(Tuple{typeof(Main.make_segs_info), ImageSegmentation.SegmentedImage{Array{Int64, 2}, ColorTypes.Gray{Float64}}})
precompile(Tuple{typeof(Main.get_dummy), String, String, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, ImageSegmentation.SegmentedImage{Array{Int64, 2}, ColorTypes.Gray{Float64}}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Main.get_dummy), String, String, Array{ColorTypes.Gray{Float64}, 2}})
precompile(Tuple{typeof(ImageSegmentation.prune_segments), ImageSegmentation.SegmentedImage{Array{Int64, 2}, ColorTypes.Gray{Float64}}, getfield(ImageSegmentation, Symbol("#8#9")){Array{Int64, 1}}, getfield(Main, Symbol("#5#6")){ImageSegmentation.SegmentedImage{Array{Int64, 2}, ColorTypes.Gray{Float64}}}})
precompile(Tuple{typeof(Main.prune_min_size), ImageSegmentation.SegmentedImage{Array{Int64, 2}, ColorTypes.Gray{Float64}}, Array{Int64, 1}, Float64, Array{Int64, 1}})
precompile(Tuple{typeof(Main.prune_min_size), ImageSegmentation.SegmentedImage{Array{Int64, 2}, ColorTypes.Gray{Float64}}, Array{Int64, 1}, Float64})
precompile(Tuple{typeof(Base.ndims), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Main.get_dummy), String, String, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.getproperty), ImageSegmentation.SegmentedImage{Array{Int64, 2}, ColorTypes.Gray{Float64}}, Symbol})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Type{Float16}, Tuple{Base.Broadcast.Extruded{Array{Float64, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(Main, Symbol("#11#13"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(Main, Symbol("#12#14"))}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Type{ColorTypes.GrayA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, Tuple{Base.Broadcast.Extruded{Array{Float16, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.collect_to!), Array{ColorTypes.GrayA{Float16}, 2}, Base.Generator{Array{ColorTypes.GrayA{Float16}, 2}, getfield(Main, Symbol("#3#4")){Float64, Float64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{ColorTypes.GrayA{Float16}, 2}, getfield(Main, Symbol("#3#4")){Float64, Float64}}})
precompile(Tuple{typeof(Main.make_transparent), Array{Float16, 2}, Float64, Float64})
precompile(Tuple{typeof(Main.make_labels_img), ImageSegmentation.SegmentedImage{Array{Int64, 2}, ColorTypes.Gray{Float64}}, Bool, Array{Ptr{FreeType.FT_FaceRec}, 1}})
precompile(Tuple{getfield(Main, Symbol("#11#13")), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Any, 1}, getfield(Main, Symbol("#11#13"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Any, 1}, getfield(Main, Symbol("#11#13"))}, Int64})
precompile(Tuple{getfield(Main, Symbol("#12#14")), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Any, 1}, getfield(Main, Symbol("#12#14"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Any, 1}, getfield(Main, Symbol("#12#14"))}, Int64})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float16, 2, Array{Float16, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}}, Array{Float16, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Float16, 2, Array{Float16, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}, false}, Float16})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float16, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(FreeTypeAbstraction, Symbol("##renderstring!#9")), Float16, Float16, Symbol, Symbol, typeof(FreeTypeAbstraction.renderstring!), Array{Float16, 2}, String, Array{Ptr{FreeType.FT_FaceRec}, 1}, Tuple{Int64, Int64}, Int64, Int64})
precompile(Tuple{getfield(FreeTypeAbstraction, Symbol("#kw##renderstring!")), NamedTuple{(:halign, :valign), Tuple{Symbol, Symbol}}, typeof(FreeTypeAbstraction.renderstring!), Array{Float16, 2}, String, Array{Ptr{FreeType.FT_FaceRec}, 1}, Tuple{Int64, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Base.Pair{Int64, Int64}, 1}, getfield(Main, Symbol("#16#18"))}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Base.Pair{Int64, Int64}, 1}, getfield(Main, Symbol("#15#17"))}, Int64})
precompile(Tuple{typeof(Main.make_plot_img), ImageSegmentation.SegmentedImage{Array{Int64, 2}, ColorTypes.Gray{Float64}}, Float64})
precompile(Tuple{typeof(Base.Multimedia.showable), Base.Multimedia.MIME{Symbol("image/svg+xml")}, Any})
precompile(Tuple{typeof(Compose.finish), Compose.SVG})
precompile(Tuple{typeof(Compose.draw), Compose.SVG, Gadfly.Plot})
precompile(Tuple{typeof(Compose.drawpart), Compose.SVG, Compose.Context, Compose.IdentityTransform, Compose.UnitBox{Float64, Float64, Float64, Float64}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.IOStream}, Base.Multimedia.MIME{Symbol("image/svg+xml")}, Gadfly.Plot})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Nothing, 1}, Nothing})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Nothing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(getfield), Tuple{Array{Gadfly.Data, 1}, Base.RefValue{Symbol}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(!=)), Tuple{Array{Nothing, 1}, Base.RefValue{Nothing}}}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(==)), Tuple{Array{Nothing, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(getfield), Tuple{Array{Gadfly.Data, 1}, Base.RefValue{Symbol}}}}}})
precompile(Tuple{typeof(Base.isequal), Gadfly.Guide.UnderGuidePosition, Gadfly.Guide.LeftGuidePosition})
precompile(Tuple{typeof(Compose.drawpart), Compose.SVG, Compose.Table, Compose.IdentityTransform, Compose.UnitBox{Float64, Float64, Float64, Float64}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Main.get_dummy), String, String, Gadfly.Plot})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Observables, Symbol("##setindex!#1")), getfield(Base, Symbol("#58#59")){Base.Fix2{typeof(Base.in), Array{Function, 1}}}, typeof(Base.setindex!), Observables.Observable{Any}, Tuple{typeof(Main.launch_space_editor), DataType}})
precompile(Tuple{getfield(Base, Symbol("#kw##setindex!")), NamedTuple{(:notify,), Tuple{getfield(Base, Symbol("#58#59")){Base.Fix2{typeof(Base.in), Array{Function, 1}}}}}, typeof(Base.setindex!), Observables.Observable{Any}, Tuple{typeof(Main.launch_space_editor), DataType}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64, Int64, Int64}, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Main.launch_space_editor), Blink.AtomShell.Window, ImageSegmentation.SegmentedImage{Array{Int64, 2}, ColorTypes.Gray{Float64}}, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, String, Flux.Chain{Tuple{Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#48#67")), Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#49#68")), getfield(BSON.__deserialized_types__, Symbol("#50#69")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#51#70")), getfield(BSON.__deserialized_types__, Symbol("#52#71")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#53#72")), getfield(BSON.__deserialized_types__, Symbol("#54#73")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#55#74")), getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}}})
precompile(Tuple{typeof(Main.get_segment_bounds), ImageSegmentation.SegmentedImage{Array{Int64, 2}, ColorTypes.Gray{Float64}}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Main.get_segs_types), ImageSegmentation.SegmentedImage{Array{Int64, 2}, ColorTypes.Gray{Float64}}, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Flux.Chain{Tuple{Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#48#67")), Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#49#68")), getfield(BSON.__deserialized_types__, Symbol("#50#69")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#51#70")), getfield(BSON.__deserialized_types__, Symbol("#52#71")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#53#72")), getfield(BSON.__deserialized_types__, Symbol("#54#73")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#55#74")), getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}}, Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Main.get_segs_types), ImageSegmentation.SegmentedImage{Array{Int64, 2}, ColorTypes.Gray{Float64}}, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Flux.Chain{Tuple{Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#48#67")), Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#49#68")), getfield(BSON.__deserialized_types__, Symbol("#50#69")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#51#70")), getfield(BSON.__deserialized_types__, Symbol("#52#71")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#53#72")), getfield(BSON.__deserialized_types__, Symbol("#54#73")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#55#74")), getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}}})
precompile(Tuple{typeof(Base.min), Int64, Int64, Int64, Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(Base.afoldl), typeof(Base.min), Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(Base.max), Int64, Int64, Int64, Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(Base.afoldl), typeof(Base.max), Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.allocatedinline), Type{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}}})
precompile(Tuple{getfield(Base, Symbol("##s627#418")), Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nref")), LineNumberNode, Module, Int64, Symbol, Any})
precompile(Tuple{getfield(Interpolations, Symbol("##s12#6")), Any, Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.unsafe_copyto!), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Int64, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.copyto!), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Base.IteratorsMD.CartesianIndices{2, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(Base.fill!), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Interpolations.copy_with_padding), Type{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}}, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Interpolations.BSpline{Interpolations.Linear}})
precompile(Tuple{typeof(Base.:(*)), FixedPointNumbers.Normed{UInt8, 8}, ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{getfield(Interpolations, Symbol("#err_singleton#11")), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Interpolations.BSpline{Interpolations.Linear}})
precompile(Tuple{typeof(Interpolations.interpolate), Type{FixedPointNumbers.Normed{UInt8, 8}}, Type{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}}, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Interpolations.BSpline{Interpolations.Linear}})
precompile(Tuple{typeof(Base.throw_boundserror), Interpolations.BSplineInterpolation{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Interpolations.BSpline{Interpolations.Linear}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}, Tuple{Float64, Float64}})
precompile(Tuple{typeof(ImageTransformations.imresize!), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Interpolations.BSplineInterpolation{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Interpolations.BSpline{Interpolations.Linear}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(ImageTransformations.imresize), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Float32}, Tuple{Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}, Type{Float32}, Tuple{Base.Broadcast.Extruded{Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{Bool, Bool}, Tuple{Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{2}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2}, Nothing, Type{Float32}, Tuple{Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Array{Float32, 2}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{Float32, 2}})
precompile(Tuple{Type{CuArrays.CuArray{Float32, 2, P} where P}, UndefInitializer, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.unsafe_copyto!), CuArrays.CuArray{Float32, 2, Nothing}, Int64, Array{Float32, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float32, 2}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), CuArrays.CuArray{Float32, 2, Nothing}, Tuple{Int64}})
precompile(Tuple{typeof(Base.unsafe_copyto!), Array{Float32, 2}, Int64, Array{Float32, 2}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), CuArrays.CuArray{Float32, 2, Nothing}, Array{Float32, 2}})
precompile(Tuple{getfield(Flux, Symbol("##fmap#53")), Base.IdDict{Any, Any}, typeof(Flux.fmap), typeof(CuArrays.cu), Array{Float32, 2}})
precompile(Tuple{typeof(Base.:(|>)), Array{Float32, 2}, typeof(Flux.gpu)})
precompile(Tuple{typeof(Graphics.width), Array{Float32, 2}})
precompile(Tuple{typeof(Graphics.height), Array{Float32, 2}})
precompile(Tuple{typeof(Base.reshape), Array{Float32, 2}, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{getfield(Base, Symbol("#throw2#199")), Array{Float32, 1}, Tuple{Int64, Int64, Base.Colon, Int64}})
precompile(Tuple{typeof(Base.reshape), Array{Float32, 1}, Tuple{Int64, Int64, Base.Colon, Int64}})
precompile(Tuple{getfield(NNlib, Symbol("##DenseConvDims#6")), Tuple{Int64, Int64}, Tuple{Int64, Int64, Int64, Int64}, Tuple{Int64, Int64}, Bool, Type{NNlib.DenseConvDims{N, K, C_in, C_out, S, P, D, F} where F where D where P where S where C_out where C_in where K where N}, Tuple{Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#48#67")), Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#49#68")), getfield(BSON.__deserialized_types__, Symbol("#50#69")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#51#70")), getfield(BSON.__deserialized_types__, Symbol("#52#71")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#53#72")), getfield(BSON.__deserialized_types__, Symbol("#54#73")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#55#74")), getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{Flux.Chain{Tuple{Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#48#67")), Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#49#68")), getfield(BSON.__deserialized_types__, Symbol("#50#69")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#51#70")), getfield(BSON.__deserialized_types__, Symbol("#52#71")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#53#72")), getfield(BSON.__deserialized_types__, Symbol("#54#73")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#55#74")), getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}}, Array{Float32, 4}})
precompile(Tuple{typeof(Base.argtail), Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Function, Vararg{Any, N} where N})
precompile(Tuple{Type{NNlib.DenseConvDims{2, (3, 3), 1, 64, (1, 1), (0, 0, 0, 0), (1, 1), false}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Base, Symbol("#throw_dmrsa#197")), Tuple{Int64, Int64, Int64, Int64, Int64}, Int64})
precompile(Tuple{getfield(NNlib, Symbol("##DenseConvDims#8")), Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Bool, Type{NNlib.DenseConvDims{N, K, C_in, C_out, S, P, D, F} where F where D where P where S where C_out where C_in where K where N}, NNlib.DenseConvDims{2, (3, 3), 1, 64, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv!#48")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv!), Array{Float32, 4}, Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (3, 3), 1, 64, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv#89")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (3, 3), 1, 64, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (3, 3), 1, 64, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{Type{NNlib.DenseConvDims{3, (3, 3, 1), 1, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{getfield(NNlib, Symbol("#4#5")){Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}}, Int64})
precompile(Tuple{typeof(Base.ntuple), getfield(NNlib, Symbol("#4#5")){Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}}, Int64})
precompile(Tuple{typeof(NNlib.check_dims), Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, NNlib.DenseConvDims{3, (3, 3, 1), 1, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv_im2col!#159")), Array{Float32, 3}, Float32, Float32, typeof(NNlib.conv_im2col!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (3, 3, 1), 1, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.conv!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (3, 3, 1), 1, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{Type{Base.Val{x} where x}, Bool})
precompile(Tuple{Type{Base.Val{false}}})
precompile(Tuple{typeof(NNlib.calc_padding_regions), NNlib.DenseConvDims{3, (3, 3, 1), 1, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float32, 2, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReshapedArray{Float32, 7, Base.SubArray{Float32, 2, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Tuple{}}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float32, 4, Array{Float32, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}}, Array{Float32, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, Int64, Int64, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Base._throw_dmrs), Int64, String, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(NNlib.im2col!), Base.SubArray{Float32, 2, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float32, 4, Array{Float32, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, NNlib.DenseConvDims{3, (3, 3, 1), 1, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float32, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (3, 3, 1), 1, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}, Bool})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (3, 3, 1), 1, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}})
precompile(Tuple{Type{Task}, Any})
precompile(Tuple{typeof(Base.schedule), Task})
precompile(Tuple{typeof(Base.wait), Task})
precompile(Tuple{typeof(Base.Broadcast.combine_styles), Array{Float32, 4}, Array{Float32, 4}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.DefaultArrayStyle{4}, Function, Array{Float32, 4}, Array{Float32, 4}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{4}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.:(+)), Tuple{Array{Float32, 4}, Array{Float32, 4}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{4}, Nothing, typeof(Base.:(+)), Tuple{Array{Float32, 4}, Array{Float32, 4}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{4}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{4}, Nothing, typeof(Base.:(+)), Tuple{Array{Float32, 4}, Array{Float32, 4}}}}})
precompile(Tuple{typeof(Base.Broadcast._bcs), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.identity), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{4}, Nothing, typeof(Base.:(+)), Tuple{Base.Broadcast.Extruded{Array{Float32, 4}, Tuple{Bool, Bool, Bool, Bool}, Tuple{Int64, Int64, Int64, Int64}}, Base.Broadcast.Extruded{Array{Float32, 4}, Tuple{Bool, Bool, Bool, Bool}, Tuple{Int64, Int64, Int64, Int64}}}}}}, Tuple{Base.IteratorsMD.CartesianIndex{4}}})
precompile(Tuple{typeof(Base.Broadcast.throwdm), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{4}, Nothing, typeof(Base.identity), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{4}, Nothing, typeof(Base.:(+)), Tuple{Array{Float32, 4}, Array{Float32, 4}}}}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(NNlib.relu), Tuple{Base.Broadcast.Extruded{Array{Float32, 4}, Tuple{Bool, Bool, Bool, Bool}, Tuple{Int64, Int64, Int64, Int64}}}}, Tuple{Base.IteratorsMD.CartesianIndex{4}}})
precompile(Tuple{getfield(BSON.__deserialized_types__, Symbol("#48#67")), Array{Float32, 4}})
precompile(Tuple{getfield(NNlib, Symbol("##PoolDims#12")), Tuple{Int64, Int64}, Tuple{Int64, Int64}, Int64, Type{NNlib.PoolDims{N, K, S, P, D} where D where P where S where K where N}, Tuple{Int64, Int64, Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{Flux.MaxPool{2, 2}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#49#68")), getfield(BSON.__deserialized_types__, Symbol("#50#69")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#51#70")), getfield(BSON.__deserialized_types__, Symbol("#52#71")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#53#72")), getfield(BSON.__deserialized_types__, Symbol("#54#73")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#55#74")), getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{getfield(BSON.__deserialized_types__, Symbol("#48#67")), Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#49#68")), getfield(BSON.__deserialized_types__, Symbol("#50#69")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#51#70")), getfield(BSON.__deserialized_types__, Symbol("#52#71")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#53#72")), getfield(BSON.__deserialized_types__, Symbol("#54#73")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#55#74")), getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{typeof(Base.argtail), Function, Flux.MaxPool{2, 2}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.argtail), Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Int64}, getfield(Base, Symbol("#168#173"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{Int64}, getfield(Base, Symbol("#166#171"))}})
precompile(Tuple{typeof(Base._repeat), Array{Int64, 1}, Tuple{Int64}, Tuple{Int64}})
precompile(Tuple{typeof(NNlib.check_spdf), Tuple{Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.view), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{Type{NNlib.PoolDims{2, (3, 3), (2, 2), (0, 0, 0, 0), (1, 1)}}, Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.fill!), Array{Float32, 4}, Float32})
precompile(Tuple{getfield(NNlib, Symbol("##PoolDims#16")), Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Type{NNlib.PoolDims{N, K, S, P, D} where D where P where S where K where N}, NNlib.PoolDims{2, (3, 3), (2, 2), (0, 0, 0, 0), (1, 1)}})
precompile(Tuple{getfield(NNlib, Symbol("##maxpool!#116")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.maxpool!), Array{Float32, 4}, Array{Float32, 4}, NNlib.PoolDims{2, (3, 3), (2, 2), (0, 0, 0, 0), (1, 1)}})
precompile(Tuple{getfield(NNlib, Symbol("##maxpool#130")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.maxpool), Array{Float32, 4}, NNlib.PoolDims{2, (3, 3), (2, 2), (0, 0, 0, 0), (1, 1)}})
precompile(Tuple{typeof(NNlib.maxpool), Array{Float32, 4}, NNlib.PoolDims{2, (3, 3), (2, 2), (0, 0, 0, 0), (1, 1)}})
precompile(Tuple{Type{NNlib.PoolDims{3, (3, 3, 1), (2, 2, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1)}}, Tuple{Int64, Int64, Int64}, Int64})
precompile(Tuple{typeof(NNlib.check_dims), Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, NNlib.PoolDims{3, (3, 3, 1), (2, 2, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1)}})
precompile(Tuple{typeof(NNlib.calc_padding_regions), NNlib.PoolDims{3, (3, 3, 1), (2, 2, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1)}})
precompile(Tuple{getfield(NNlib, Symbol("##maxpool_direct!#173")), Float32, Float32, typeof(NNlib.maxpool_direct!), Array{Float32, 5}, Array{Float32, 5}, NNlib.PoolDims{3, (3, 3, 1), (2, 2, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1)}})
precompile(Tuple{typeof(NNlib.maxpool!), Array{Float32, 5}, Array{Float32, 5}, NNlib.PoolDims{3, (3, 3, 1), (2, 2, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1)}})
precompile(Tuple{getfield(NNlib, Symbol("##DenseConvDims#6")), Tuple{Int64, Int64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Bool, Type{NNlib.DenseConvDims{N, K, C_in, C_out, S, P, D, F} where F where D where P where S where C_out where C_in where K where N}, Tuple{Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#49#68")), getfield(BSON.__deserialized_types__, Symbol("#50#69")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#51#70")), getfield(BSON.__deserialized_types__, Symbol("#52#71")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#53#72")), getfield(BSON.__deserialized_types__, Symbol("#54#73")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#55#74")), getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{Type{NNlib.DenseConvDims{2, (1, 1), 64, 16, (1, 1), (0, 0, 0, 0), (1, 1), false}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(NNlib, Symbol("##DenseConvDims#8")), Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Bool, Type{NNlib.DenseConvDims{N, K, C_in, C_out, S, P, D, F} where F where D where P where S where C_out where C_in where K where N}, NNlib.DenseConvDims{2, (1, 1), 64, 16, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv!#48")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv!), Array{Float32, 4}, Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 64, 16, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv#89")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 64, 16, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 64, 16, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{Type{NNlib.DenseConvDims{3, (1, 1, 1), 64, 16, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(NNlib.check_dims), Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, NNlib.DenseConvDims{3, (1, 1, 1), 64, 16, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv_im2col!#159")), Array{Float32, 3}, Float32, Float32, typeof(NNlib.conv_im2col!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 64, 16, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.conv!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 64, 16, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.calc_padding_regions), NNlib.DenseConvDims{3, (1, 1, 1), 64, 16, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.im2col!), Base.SubArray{Float32, 2, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float32, 4, Array{Float32, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, NNlib.DenseConvDims{3, (1, 1, 1), 64, 16, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 64, 16, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}, Bool})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 64, 16, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(BSON.__deserialized_types__, Symbol("#49#68")), Array{Float32, 4}})
precompile(Tuple{getfield(BSON.__deserialized_types__, Symbol("#50#69")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{getfield(BSON.__deserialized_types__, Symbol("#50#69")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#51#70")), getfield(BSON.__deserialized_types__, Symbol("#52#71")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#53#72")), getfield(BSON.__deserialized_types__, Symbol("#54#73")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#55#74")), getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{getfield(BSON.__deserialized_types__, Symbol("#49#68")), getfield(BSON.__deserialized_types__, Symbol("#50#69")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#51#70")), getfield(BSON.__deserialized_types__, Symbol("#52#71")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#53#72")), getfield(BSON.__deserialized_types__, Symbol("#54#73")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#55#74")), getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{Type{NNlib.DenseConvDims{2, (1, 1), 16, 64, (1, 1), (0, 0, 0, 0), (1, 1), false}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(NNlib, Symbol("##DenseConvDims#8")), Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Bool, Type{NNlib.DenseConvDims{N, K, C_in, C_out, S, P, D, F} where F where D where P where S where C_out where C_in where K where N}, NNlib.DenseConvDims{2, (1, 1), 16, 64, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv!#48")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv!), Array{Float32, 4}, Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 16, 64, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv#89")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 16, 64, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 16, 64, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{Type{NNlib.DenseConvDims{3, (1, 1, 1), 16, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(NNlib.check_dims), Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, NNlib.DenseConvDims{3, (1, 1, 1), 16, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv_im2col!#159")), Array{Float32, 3}, Float32, Float32, typeof(NNlib.conv_im2col!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 16, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.conv!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 16, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.calc_padding_regions), NNlib.DenseConvDims{3, (1, 1, 1), 16, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.im2col!), Base.SubArray{Float32, 2, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float32, 4, Array{Float32, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, NNlib.DenseConvDims{3, (1, 1, 1), 16, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 16, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}, Bool})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 16, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float32, 4}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{4}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(NNlib.relu), Tuple{Array{Float32, 4}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{4}, Nothing, typeof(NNlib.relu), Tuple{Array{Float32, 4}}}})
precompile(Tuple{Type{NNlib.DenseConvDims{2, (3, 3), 16, 64, (1, 1), (1, 1, 1, 1), (1, 1), false}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(NNlib, Symbol("##DenseConvDims#8")), Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Bool, Type{NNlib.DenseConvDims{N, K, C_in, C_out, S, P, D, F} where F where D where P where S where C_out where C_in where K where N}, NNlib.DenseConvDims{2, (3, 3), 16, 64, (1, 1), (1, 1, 1, 1), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv!#48")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv!), Array{Float32, 4}, Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (3, 3), 16, 64, (1, 1), (1, 1, 1, 1), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv#89")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (3, 3), 16, 64, (1, 1), (1, 1, 1, 1), (1, 1), false}})
precompile(Tuple{typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (3, 3), 16, 64, (1, 1), (1, 1, 1, 1), (1, 1), false}})
precompile(Tuple{Type{NNlib.DenseConvDims{3, (3, 3, 1), 16, 64, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(NNlib.check_dims), Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, NNlib.DenseConvDims{3, (3, 3, 1), 16, 64, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv_im2col!#159")), Array{Float32, 3}, Float32, Float32, typeof(NNlib.conv_im2col!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (3, 3, 1), 16, 64, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.conv!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (3, 3, 1), 16, 64, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.calc_padding_regions), NNlib.DenseConvDims{3, (3, 3, 1), 16, 64, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.im2col!), Base.SubArray{Float32, 2, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float32, 4, Array{Float32, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, NNlib.DenseConvDims{3, (3, 3, 1), 16, 64, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (3, 3, 1), 16, 64, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}, Bool})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (3, 3, 1), 16, 64, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(Base, Symbol("#kw##cat")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.cat), Array{Float32, 4}, Array{Float32, 4}})
precompile(Tuple{getfield(Base, Symbol("#kw##cat_t")), NamedTuple{(:dims,), Tuple{Int64}}, typeof(Base.cat_t), Type{Float32}, Array{Float32, 4}, Vararg{Array{Float32, 4}, N} where N})
precompile(Tuple{getfield(Base, Symbol("##cat_t#103")), Int64, typeof(Base.cat_t), Type{Float32}, Array{Float32, 4}, Vararg{Array{Float32, 4}, N} where N})
precompile(Tuple{typeof(Base._cat_t), Int64, Type{T} where T, Array{Float32, 4}, Vararg{Array{Float32, 4}, N} where N})
precompile(Tuple{typeof(Base.map), typeof(Base.cat_size), Tuple{Array{Float32, 4}, Array{Float32, 4}}})
precompile(Tuple{typeof(Base.cat_shape), Tuple{Bool, Bool, Bool}, Tuple{}, Tuple{Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.cat_similar), Array{Float32, 4}, Type{T} where T, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.similar), Array{Float32, 4}, Type{T} where T, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{Type{Array{Float32, 4}}, UndefInitializer, Tuple{Int64, Int64, Int64, Int64}})
precompile(Tuple{typeof(Base._unsafe_setindex!), Base.IndexLinear, Array{Float32, 4}, Array{Float32, 4}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float32, 4}, Tuple{Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.__cat), Array{Float32, 4}, Tuple{Int64, Int64, Int64, Int64}, Tuple{Bool, Bool, Bool}, Array{Float32, 4}, Vararg{Array{Float32, 4}, N} where N})
precompile(Tuple{typeof(Base.setindex_shape_check), Array{Float32, 4}, Int64, Int64, Int64, Vararg{Int64, N} where N})
precompile(Tuple{typeof(Flux.applychain), Tuple{Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#51#70")), getfield(BSON.__deserialized_types__, Symbol("#52#71")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#53#72")), getfield(BSON.__deserialized_types__, Symbol("#54#73")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#55#74")), getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{Type{NNlib.DenseConvDims{2, (1, 1), 128, 16, (1, 1), (0, 0, 0, 0), (1, 1), false}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(NNlib, Symbol("##DenseConvDims#8")), Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Bool, Type{NNlib.DenseConvDims{N, K, C_in, C_out, S, P, D, F} where F where D where P where S where C_out where C_in where K where N}, NNlib.DenseConvDims{2, (1, 1), 128, 16, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv!#48")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv!), Array{Float32, 4}, Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 128, 16, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv#89")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 128, 16, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 128, 16, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{Type{NNlib.DenseConvDims{3, (1, 1, 1), 128, 16, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(NNlib.check_dims), Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, NNlib.DenseConvDims{3, (1, 1, 1), 128, 16, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv_im2col!#159")), Array{Float32, 3}, Float32, Float32, typeof(NNlib.conv_im2col!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 128, 16, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.conv!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 128, 16, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.calc_padding_regions), NNlib.DenseConvDims{3, (1, 1, 1), 128, 16, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.im2col!), Base.SubArray{Float32, 2, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float32, 4, Array{Float32, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, NNlib.DenseConvDims{3, (1, 1, 1), 128, 16, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 128, 16, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}, Bool})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 128, 16, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(BSON.__deserialized_types__, Symbol("#51#70")), Array{Float32, 4}})
precompile(Tuple{getfield(BSON.__deserialized_types__, Symbol("#52#71")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{getfield(BSON.__deserialized_types__, Symbol("#52#71")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#53#72")), getfield(BSON.__deserialized_types__, Symbol("#54#73")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#55#74")), getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{getfield(BSON.__deserialized_types__, Symbol("#51#70")), getfield(BSON.__deserialized_types__, Symbol("#52#71")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#53#72")), getfield(BSON.__deserialized_types__, Symbol("#54#73")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#55#74")), getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#53#72")), getfield(BSON.__deserialized_types__, Symbol("#54#73")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#55#74")), getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#53#72")), getfield(BSON.__deserialized_types__, Symbol("#54#73")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#55#74")), getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{Type{NNlib.DenseConvDims{2, (1, 1), 128, 32, (1, 1), (0, 0, 0, 0), (1, 1), false}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(NNlib, Symbol("##DenseConvDims#8")), Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Bool, Type{NNlib.DenseConvDims{N, K, C_in, C_out, S, P, D, F} where F where D where P where S where C_out where C_in where K where N}, NNlib.DenseConvDims{2, (1, 1), 128, 32, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv!#48")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv!), Array{Float32, 4}, Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 128, 32, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv#89")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 128, 32, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 128, 32, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{Type{NNlib.DenseConvDims{3, (1, 1, 1), 128, 32, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(NNlib.check_dims), Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, NNlib.DenseConvDims{3, (1, 1, 1), 128, 32, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv_im2col!#159")), Array{Float32, 3}, Float32, Float32, typeof(NNlib.conv_im2col!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 128, 32, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.conv!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 128, 32, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.calc_padding_regions), NNlib.DenseConvDims{3, (1, 1, 1), 128, 32, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.im2col!), Base.SubArray{Float32, 2, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float32, 4, Array{Float32, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, NNlib.DenseConvDims{3, (1, 1, 1), 128, 32, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 128, 32, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}, Bool})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 128, 32, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(BSON.__deserialized_types__, Symbol("#53#72")), Array{Float32, 4}})
precompile(Tuple{getfield(BSON.__deserialized_types__, Symbol("#54#73")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{getfield(BSON.__deserialized_types__, Symbol("#54#73")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#55#74")), getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{getfield(BSON.__deserialized_types__, Symbol("#53#72")), getfield(BSON.__deserialized_types__, Symbol("#54#73")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#55#74")), getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{Type{NNlib.DenseConvDims{2, (1, 1), 32, 128, (1, 1), (0, 0, 0, 0), (1, 1), false}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(NNlib, Symbol("##DenseConvDims#8")), Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Bool, Type{NNlib.DenseConvDims{N, K, C_in, C_out, S, P, D, F} where F where D where P where S where C_out where C_in where K where N}, NNlib.DenseConvDims{2, (1, 1), 32, 128, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv!#48")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv!), Array{Float32, 4}, Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 32, 128, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv#89")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 32, 128, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 32, 128, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{Type{NNlib.DenseConvDims{3, (1, 1, 1), 32, 128, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(NNlib.check_dims), Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, NNlib.DenseConvDims{3, (1, 1, 1), 32, 128, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv_im2col!#159")), Array{Float32, 3}, Float32, Float32, typeof(NNlib.conv_im2col!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 32, 128, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.conv!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 32, 128, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.calc_padding_regions), NNlib.DenseConvDims{3, (1, 1, 1), 32, 128, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.im2col!), Base.SubArray{Float32, 2, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float32, 4, Array{Float32, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, NNlib.DenseConvDims{3, (1, 1, 1), 32, 128, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 32, 128, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}, Bool})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 32, 128, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}})
precompile(Tuple{Type{NNlib.DenseConvDims{2, (3, 3), 32, 128, (1, 1), (1, 1, 1, 1), (1, 1), false}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(NNlib, Symbol("##DenseConvDims#8")), Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Bool, Type{NNlib.DenseConvDims{N, K, C_in, C_out, S, P, D, F} where F where D where P where S where C_out where C_in where K where N}, NNlib.DenseConvDims{2, (3, 3), 32, 128, (1, 1), (1, 1, 1, 1), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv!#48")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv!), Array{Float32, 4}, Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (3, 3), 32, 128, (1, 1), (1, 1, 1, 1), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv#89")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (3, 3), 32, 128, (1, 1), (1, 1, 1, 1), (1, 1), false}})
precompile(Tuple{typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (3, 3), 32, 128, (1, 1), (1, 1, 1, 1), (1, 1), false}})
precompile(Tuple{Type{NNlib.DenseConvDims{3, (3, 3, 1), 32, 128, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(NNlib.check_dims), Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, NNlib.DenseConvDims{3, (3, 3, 1), 32, 128, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv_im2col!#159")), Array{Float32, 3}, Float32, Float32, typeof(NNlib.conv_im2col!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (3, 3, 1), 32, 128, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.conv!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (3, 3, 1), 32, 128, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.calc_padding_regions), NNlib.DenseConvDims{3, (3, 3, 1), 32, 128, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.im2col!), Base.SubArray{Float32, 2, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float32, 4, Array{Float32, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, NNlib.DenseConvDims{3, (3, 3, 1), 32, 128, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (3, 3, 1), 32, 128, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}, Bool})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (3, 3, 1), 32, 128, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Flux.applychain), Tuple{Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#55#74")), getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{Type{NNlib.DenseConvDims{2, (1, 1), 256, 32, (1, 1), (0, 0, 0, 0), (1, 1), false}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(NNlib, Symbol("##DenseConvDims#8")), Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Bool, Type{NNlib.DenseConvDims{N, K, C_in, C_out, S, P, D, F} where F where D where P where S where C_out where C_in where K where N}, NNlib.DenseConvDims{2, (1, 1), 256, 32, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv!#48")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv!), Array{Float32, 4}, Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 256, 32, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv#89")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 256, 32, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 256, 32, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{Type{NNlib.DenseConvDims{3, (1, 1, 1), 256, 32, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(NNlib.check_dims), Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, NNlib.DenseConvDims{3, (1, 1, 1), 256, 32, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv_im2col!#159")), Array{Float32, 3}, Float32, Float32, typeof(NNlib.conv_im2col!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 256, 32, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.conv!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 256, 32, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.calc_padding_regions), NNlib.DenseConvDims{3, (1, 1, 1), 256, 32, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.im2col!), Base.SubArray{Float32, 2, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float32, 4, Array{Float32, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, NNlib.DenseConvDims{3, (1, 1, 1), 256, 32, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 256, 32, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}, Bool})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 256, 32, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(BSON.__deserialized_types__, Symbol("#55#74")), Array{Float32, 4}})
precompile(Tuple{getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{getfield(BSON.__deserialized_types__, Symbol("#55#74")), getfield(BSON.__deserialized_types__, Symbol("#56#75")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{Flux.MaxPool{2, 2}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{Type{NNlib.DenseConvDims{2, (1, 1), 256, 48, (1, 1), (0, 0, 0, 0), (1, 1), false}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(NNlib, Symbol("##DenseConvDims#8")), Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Bool, Type{NNlib.DenseConvDims{N, K, C_in, C_out, S, P, D, F} where F where D where P where S where C_out where C_in where K where N}, NNlib.DenseConvDims{2, (1, 1), 256, 48, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv!#48")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv!), Array{Float32, 4}, Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 256, 48, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv#89")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 256, 48, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 256, 48, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{Type{NNlib.DenseConvDims{3, (1, 1, 1), 256, 48, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(NNlib.check_dims), Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, NNlib.DenseConvDims{3, (1, 1, 1), 256, 48, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv_im2col!#159")), Array{Float32, 3}, Float32, Float32, typeof(NNlib.conv_im2col!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 256, 48, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.conv!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 256, 48, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.calc_padding_regions), NNlib.DenseConvDims{3, (1, 1, 1), 256, 48, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.im2col!), Base.SubArray{Float32, 2, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float32, 4, Array{Float32, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, NNlib.DenseConvDims{3, (1, 1, 1), 256, 48, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 256, 48, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}, Bool})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 256, 48, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(BSON.__deserialized_types__, Symbol("#57#76")), Array{Float32, 4}})
precompile(Tuple{getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{getfield(BSON.__deserialized_types__, Symbol("#57#76")), getfield(BSON.__deserialized_types__, Symbol("#58#77")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{Type{NNlib.DenseConvDims{2, (1, 1), 48, 192, (1, 1), (0, 0, 0, 0), (1, 1), false}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(NNlib, Symbol("##DenseConvDims#8")), Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Bool, Type{NNlib.DenseConvDims{N, K, C_in, C_out, S, P, D, F} where F where D where P where S where C_out where C_in where K where N}, NNlib.DenseConvDims{2, (1, 1), 48, 192, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv!#48")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv!), Array{Float32, 4}, Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 48, 192, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv#89")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 48, 192, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 48, 192, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{Type{NNlib.DenseConvDims{3, (1, 1, 1), 48, 192, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(NNlib.check_dims), Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, NNlib.DenseConvDims{3, (1, 1, 1), 48, 192, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv_im2col!#159")), Array{Float32, 3}, Float32, Float32, typeof(NNlib.conv_im2col!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 48, 192, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.conv!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 48, 192, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.calc_padding_regions), NNlib.DenseConvDims{3, (1, 1, 1), 48, 192, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.im2col!), Base.SubArray{Float32, 2, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float32, 4, Array{Float32, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, NNlib.DenseConvDims{3, (1, 1, 1), 48, 192, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 48, 192, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}, Bool})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 48, 192, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}})
precompile(Tuple{Type{NNlib.DenseConvDims{2, (3, 3), 48, 192, (1, 1), (1, 1, 1, 1), (1, 1), false}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(NNlib, Symbol("##DenseConvDims#8")), Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Bool, Type{NNlib.DenseConvDims{N, K, C_in, C_out, S, P, D, F} where F where D where P where S where C_out where C_in where K where N}, NNlib.DenseConvDims{2, (3, 3), 48, 192, (1, 1), (1, 1, 1, 1), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv!#48")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv!), Array{Float32, 4}, Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (3, 3), 48, 192, (1, 1), (1, 1, 1, 1), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv#89")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (3, 3), 48, 192, (1, 1), (1, 1, 1, 1), (1, 1), false}})
precompile(Tuple{typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (3, 3), 48, 192, (1, 1), (1, 1, 1, 1), (1, 1), false}})
precompile(Tuple{Type{NNlib.DenseConvDims{3, (3, 3, 1), 48, 192, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(NNlib.check_dims), Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, NNlib.DenseConvDims{3, (3, 3, 1), 48, 192, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv_im2col!#159")), Array{Float32, 3}, Float32, Float32, typeof(NNlib.conv_im2col!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (3, 3, 1), 48, 192, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.conv!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (3, 3, 1), 48, 192, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.calc_padding_regions), NNlib.DenseConvDims{3, (3, 3, 1), 48, 192, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.im2col!), Base.SubArray{Float32, 2, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float32, 4, Array{Float32, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, NNlib.DenseConvDims{3, (3, 3, 1), 48, 192, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (3, 3, 1), 48, 192, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}, Bool})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (3, 3, 1), 48, 192, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Flux.applychain), Tuple{Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{Type{NNlib.DenseConvDims{2, (1, 1), 384, 48, (1, 1), (0, 0, 0, 0), (1, 1), false}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(NNlib, Symbol("##DenseConvDims#8")), Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Bool, Type{NNlib.DenseConvDims{N, K, C_in, C_out, S, P, D, F} where F where D where P where S where C_out where C_in where K where N}, NNlib.DenseConvDims{2, (1, 1), 384, 48, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv!#48")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv!), Array{Float32, 4}, Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 384, 48, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv#89")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 384, 48, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 384, 48, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{Type{NNlib.DenseConvDims{3, (1, 1, 1), 384, 48, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(NNlib.check_dims), Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, NNlib.DenseConvDims{3, (1, 1, 1), 384, 48, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv_im2col!#159")), Array{Float32, 3}, Float32, Float32, typeof(NNlib.conv_im2col!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 384, 48, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.conv!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 384, 48, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.calc_padding_regions), NNlib.DenseConvDims{3, (1, 1, 1), 384, 48, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.im2col!), Base.SubArray{Float32, 2, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float32, 4, Array{Float32, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, NNlib.DenseConvDims{3, (1, 1, 1), 384, 48, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 384, 48, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}, Bool})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 384, 48, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(BSON.__deserialized_types__, Symbol("#59#78")), Array{Float32, 4}})
precompile(Tuple{getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{getfield(BSON.__deserialized_types__, Symbol("#59#78")), getfield(BSON.__deserialized_types__, Symbol("#60#79")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{Type{NNlib.DenseConvDims{2, (1, 1), 384, 64, (1, 1), (0, 0, 0, 0), (1, 1), false}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(NNlib, Symbol("##DenseConvDims#8")), Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Bool, Type{NNlib.DenseConvDims{N, K, C_in, C_out, S, P, D, F} where F where D where P where S where C_out where C_in where K where N}, NNlib.DenseConvDims{2, (1, 1), 384, 64, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv!#48")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv!), Array{Float32, 4}, Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 384, 64, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv#89")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 384, 64, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 384, 64, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{Type{NNlib.DenseConvDims{3, (1, 1, 1), 384, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(NNlib.check_dims), Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, NNlib.DenseConvDims{3, (1, 1, 1), 384, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv_im2col!#159")), Array{Float32, 3}, Float32, Float32, typeof(NNlib.conv_im2col!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 384, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.conv!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 384, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.calc_padding_regions), NNlib.DenseConvDims{3, (1, 1, 1), 384, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.im2col!), Base.SubArray{Float32, 2, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float32, 4, Array{Float32, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, NNlib.DenseConvDims{3, (1, 1, 1), 384, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 384, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}, Bool})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 384, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(BSON.__deserialized_types__, Symbol("#61#80")), Array{Float32, 4}})
precompile(Tuple{getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{getfield(BSON.__deserialized_types__, Symbol("#61#80")), getfield(BSON.__deserialized_types__, Symbol("#62#81")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{Type{NNlib.DenseConvDims{2, (1, 1), 64, 256, (1, 1), (0, 0, 0, 0), (1, 1), false}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(NNlib, Symbol("##DenseConvDims#8")), Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Bool, Type{NNlib.DenseConvDims{N, K, C_in, C_out, S, P, D, F} where F where D where P where S where C_out where C_in where K where N}, NNlib.DenseConvDims{2, (1, 1), 64, 256, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv!#48")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv!), Array{Float32, 4}, Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 64, 256, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv#89")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 64, 256, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 64, 256, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{Type{NNlib.DenseConvDims{3, (1, 1, 1), 64, 256, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(NNlib.check_dims), Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, NNlib.DenseConvDims{3, (1, 1, 1), 64, 256, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv_im2col!#159")), Array{Float32, 3}, Float32, Float32, typeof(NNlib.conv_im2col!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 64, 256, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.conv!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 64, 256, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.calc_padding_regions), NNlib.DenseConvDims{3, (1, 1, 1), 64, 256, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.im2col!), Base.SubArray{Float32, 2, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float32, 4, Array{Float32, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, NNlib.DenseConvDims{3, (1, 1, 1), 64, 256, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 64, 256, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}, Bool})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 64, 256, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}})
precompile(Tuple{Type{NNlib.DenseConvDims{2, (3, 3), 64, 256, (1, 1), (1, 1, 1, 1), (1, 1), false}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(NNlib, Symbol("##DenseConvDims#8")), Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Bool, Type{NNlib.DenseConvDims{N, K, C_in, C_out, S, P, D, F} where F where D where P where S where C_out where C_in where K where N}, NNlib.DenseConvDims{2, (3, 3), 64, 256, (1, 1), (1, 1, 1, 1), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv!#48")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv!), Array{Float32, 4}, Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (3, 3), 64, 256, (1, 1), (1, 1, 1, 1), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv#89")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (3, 3), 64, 256, (1, 1), (1, 1, 1, 1), (1, 1), false}})
precompile(Tuple{typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (3, 3), 64, 256, (1, 1), (1, 1, 1, 1), (1, 1), false}})
precompile(Tuple{Type{NNlib.DenseConvDims{3, (3, 3, 1), 64, 256, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(NNlib.check_dims), Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, NNlib.DenseConvDims{3, (3, 3, 1), 64, 256, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv_im2col!#159")), Array{Float32, 3}, Float32, Float32, typeof(NNlib.conv_im2col!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (3, 3, 1), 64, 256, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.conv!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (3, 3, 1), 64, 256, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.calc_padding_regions), NNlib.DenseConvDims{3, (3, 3, 1), 64, 256, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.im2col!), Base.SubArray{Float32, 2, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float32, 4, Array{Float32, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, NNlib.DenseConvDims{3, (3, 3, 1), 64, 256, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (3, 3, 1), 64, 256, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}, Bool})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (3, 3, 1), 64, 256, (1, 1, 1), (1, 1, 1, 1, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Flux.applychain), Tuple{Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{Type{NNlib.DenseConvDims{2, (1, 1), 512, 64, (1, 1), (0, 0, 0, 0), (1, 1), false}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(NNlib, Symbol("##DenseConvDims#8")), Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Bool, Type{NNlib.DenseConvDims{N, K, C_in, C_out, S, P, D, F} where F where D where P where S where C_out where C_in where K where N}, NNlib.DenseConvDims{2, (1, 1), 512, 64, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv!#48")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv!), Array{Float32, 4}, Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 512, 64, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv#89")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 512, 64, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 512, 64, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{Type{NNlib.DenseConvDims{3, (1, 1, 1), 512, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(NNlib.check_dims), Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, NNlib.DenseConvDims{3, (1, 1, 1), 512, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv_im2col!#159")), Array{Float32, 3}, Float32, Float32, typeof(NNlib.conv_im2col!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 512, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.conv!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 512, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.calc_padding_regions), NNlib.DenseConvDims{3, (1, 1, 1), 512, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.im2col!), Base.SubArray{Float32, 2, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float32, 4, Array{Float32, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, NNlib.DenseConvDims{3, (1, 1, 1), 512, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 512, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}, Bool})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 512, 64, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(BSON.__deserialized_types__, Symbol("#63#82")), Array{Float32, 4}})
precompile(Tuple{getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{getfield(BSON.__deserialized_types__, Symbol("#63#82")), getfield(BSON.__deserialized_types__, Symbol("#64#83")){Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, Flux.Conv{2, 2, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}}, Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{typeof(Flux.applychain), Tuple{Flux.Dropout{Float32, Base.Colon}, Flux.Conv{2, 4, typeof(Base.identity), Array{Float32, 4}, Array{Float32, 1}}, getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{Type{NNlib.DenseConvDims{2, (1, 1), 512, 50, (1, 1), (0, 0, 0, 0), (1, 1), false}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(NNlib, Symbol("##DenseConvDims#8")), Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Int64, Int64, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Bool, Type{NNlib.DenseConvDims{N, K, C_in, C_out, S, P, D, F} where F where D where P where S where C_out where C_in where K where N}, NNlib.DenseConvDims{2, (1, 1), 512, 50, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv!#48")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv!), Array{Float32, 4}, Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 512, 50, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv#89")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 512, 50, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{typeof(NNlib.conv), Array{Float32, 4}, Array{Float32, 4}, NNlib.DenseConvDims{2, (1, 1), 512, 50, (1, 1), (0, 0, 0, 0), (1, 1), false}})
precompile(Tuple{Type{NNlib.DenseConvDims{3, (1, 1, 1), 512, 50, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(NNlib.check_dims), Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, Tuple{Int64, Int64, Int64, Int64, Int64}, NNlib.DenseConvDims{3, (1, 1, 1), 512, 50, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("##conv_im2col!#159")), Array{Float32, 3}, Float32, Float32, typeof(NNlib.conv_im2col!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 512, 50, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.conv!), Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 512, 50, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.calc_padding_regions), NNlib.DenseConvDims{3, (1, 1, 1), 512, 50, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{typeof(NNlib.im2col!), Base.SubArray{Float32, 2, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.SubArray{Float32, 4, Array{Float32, 5}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Int64}, true}, NNlib.DenseConvDims{3, (1, 1, 1), 512, 50, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 512, 50, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}, Bool})
precompile(Tuple{getfield(NNlib, Symbol("#233#threadsfor_fun#160")){Array{Float32, 3}, Float32, Float32, Array{Float32, 5}, Array{Float32, 5}, Array{Float32, 5}, NNlib.DenseConvDims{3, (1, 1, 1), 512, 50, (1, 1, 1), (0, 0, 0, 0, 0, 0), (1, 1, 1), false}, Int64, Int64, Int64, Base.UnitRange{Int64}}})
precompile(Tuple{getfield(BSON.__deserialized_types__, Symbol("#65#84")), Array{Float32, 4}})
precompile(Tuple{typeof(Base.reduced_indices), Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.check_reducedims), Array{Float32, 4}, Array{Float32, 4}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.add_sum), Array{Float32, 4}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreducedim!), typeof(Base.identity), typeof(Base.add_sum), Array{Float32, 4}, Array{Float32, 4}})
precompile(Tuple{typeof(Base.divgcd), Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}, typeof(Base.:(*)), Tuple{Base.Broadcast.Extruded{Array{Float32, 4}, Tuple{Bool, Bool, Bool, Bool}, Tuple{Int64, Int64, Int64, Int64}}, Base.Rational{Int64}}}, Tuple{Base.IteratorsMD.CartesianIndex{4}}})
precompile(Tuple{typeof(Statistics.mean!), Array{Float32, 4}, Array{Float32, 4}})
precompile(Tuple{typeof(Statistics._mean), Array{Float32, 4}, Array{Int64, 1}})
precompile(Tuple{getfield(BSON.__deserialized_types__, Symbol("#66#85")), Array{Float32, 4}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.max), Array{Float32, 1}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreducedim!), typeof(Base.identity), typeof(Base.max), Array{Float32, 1}, Array{Float32, 1}})
precompile(Tuple{typeof(Base.exp), Float32})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.exp), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Array{Float32, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float32, 1}, Tuple{Bool}, Tuple{Int64}}}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.reduced_indices), Tuple{Base.OneTo{Int64}}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Float32, 1}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Array{Float32, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{getfield(NNlib, Symbol("##softmax#31")), Int64, typeof(NNlib.softmax), Array{Float32, 1}})
precompile(Tuple{typeof(Flux.applychain), Tuple{getfield(BSON.__deserialized_types__, Symbol("#65#84")), getfield(BSON.__deserialized_types__, Symbol("#66#85")), typeof(Base.vec), typeof(NNlib.softmax)}, Array{Float32, 4}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float32, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.reducedim_init), Function, typeof(Base.max), Array{Float32, 1}, Int64})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Base.SubArray{Float32, 1, Array{Float32, 1}, Tuple{Base.OneTo{Int64}}, true}, Base.Colon})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float32, 1, Array{Float32, 1}, Tuple{Base.OneTo{Int64}}, true}}, Array{Float32, 1}, Tuple{Base.OneTo{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.min), Base.SubArray{Float32, 1, Array{Float32, 1}, Tuple{Base.OneTo{Int64}}, true}, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.identity), typeof(Base.min), Base.IndexLinear, Base.SubArray{Float32, 1, Array{Float32, 1}, Tuple{Base.OneTo{Int64}}, true}})
precompile(Tuple{typeof(Base.:(!=)), Float32, Float32})
precompile(Tuple{typeof(Base._realtype), Function, Type{T} where T})
precompile(Tuple{typeof(Base.reducedim_initarray), Array{Float32, 1}, Int64, Float32, Type{Float32}})
precompile(Tuple{typeof(Base.findmax), Array{Float32, 1}})
precompile(Tuple{typeof(OrderedCollections.ht_keyindex), OrderedCollections.OrderedDict{Int64, String}, Int64, Bool})
precompile(Tuple{typeof(Base.getindex), OrderedCollections.OrderedDict{Int64, String}, Int64})
precompile(Tuple{getfield(Base, Symbol("##s66#142")), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.sort!), Array{Base.Pair{Int64, Int64}, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{getfield(Main, Symbol("#32#38"))}})
precompile(Tuple{typeof(Base.sort!), Array{Base.Pair{Int64, Int64}, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{getfield(Main, Symbol("#32#38"))}, Array{Base.Pair{Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Base.Dict{Int64, Int64}, getfield(Main, Symbol("#33#39")){Float64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Dict{Int64, Int64}, getfield(Main, Symbol("#33#39")){Float64}}})
precompile(Tuple{getfield(Main, Symbol("#34#40")){Base.Dict{Any, Any}, Float64, String}, Base.Pair{Int64, Int64}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Any, Any}}, Base.Generator{Array{Base.Pair{Int64, Int64}, 1}, getfield(Main, Symbol("#34#40")){Base.Dict{Any, Any}, Float64, String}}})
precompile(Tuple{typeof(Base._all), getfield(OrderedCollections, Symbol("#1#2")), Base.Generator{Array{Base.Pair{Int64, Int64}, 1}, getfield(Main, Symbol("#34#40")){Base.Dict{Any, Any}, Float64, String}}, Base.Colon})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Base.Generator{Array{Base.Pair{Int64, Int64}, 1}, getfield(Main, Symbol("#34#40")){Base.Dict{Any, Any}, Float64, String}}})
precompile(Tuple{getfield(Main, Symbol("#35#41")), Base.Pair{Int64, Int64}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Any, Any}}, Base.Generator{Array{Base.Pair{Int64, Int64}, 1}, getfield(Main, Symbol("#35#41"))}})
precompile(Tuple{typeof(Base._all), getfield(OrderedCollections, Symbol("#1#2")), Base.Generator{Array{Base.Pair{Int64, Int64}, 1}, getfield(Main, Symbol("#35#41"))}, Base.Colon})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Base.Generator{Array{Base.Pair{Int64, Int64}, 1}, getfield(Main, Symbol("#35#41"))}})
precompile(Tuple{getfield(Main, Symbol("#36#42")), Base.Pair{Int64, Int64}})
precompile(Tuple{Type{OrderedCollections.OrderedDict{Any, Any}}, Base.Generator{Array{Base.Pair{Int64, Int64}, 1}, getfield(Main, Symbol("#36#42"))}})
precompile(Tuple{typeof(Base._all), getfield(OrderedCollections, Symbol("#1#2")), Base.Generator{Array{Base.Pair{Int64, Int64}, 1}, getfield(Main, Symbol("#36#42"))}, Base.Colon})
precompile(Tuple{Type{OrderedCollections.OrderedDict{K, V} where V where K}, Base.Generator{Array{Base.Pair{Int64, Int64}, 1}, getfield(Main, Symbol("#36#42"))}})
precompile(Tuple{getfield(Main, Symbol("#37#43")){OrderedCollections.OrderedDict{Any, Any}, OrderedCollections.OrderedDict{Any, Any}, OrderedCollections.OrderedDict{Any, Any}}, Base.Pair{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{WebIO.Node{WebIO.DOM}, 1}, WebIO.Node{WebIO.DOM}, Base.Generator{Array{Base.Pair{Int64, Int64}, 1}, getfield(Main, Symbol("#37#43")){OrderedCollections.OrderedDict{Any, Any}, OrderedCollections.OrderedDict{Any, Any}, OrderedCollections.OrderedDict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Base.Pair{Int64, Int64}, 1}, getfield(Main, Symbol("#37#43")){OrderedCollections.OrderedDict{Any, Any}, OrderedCollections.OrderedDict{Any, Any}, OrderedCollections.OrderedDict{Any, Any}}}})
precompile(Tuple{typeof(Base.sort!), Array{Base.Pair{Int64, Int64}, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ReverseOrdering{Base.Order.By{getfield(Main, Symbol("#32#38"))}}})
precompile(Tuple{typeof(Base.sort!), Array{Base.Pair{Int64, Int64}, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.ReverseOrdering{Base.Order.By{getfield(Main, Symbol("#32#38"))}}, Array{Base.Pair{Int64, Int64}, 1}})
precompile(Tuple{typeof(Main.make_segs_details), ImageSegmentation.SegmentedImage{Array{Int64, 2}, ColorTypes.Gray{Float64}}, Base.Dict{Any, Any}, Float64, String, Int64})
precompile(Tuple{typeof(CSSUtil.hbox), Widgets.Widget{:dropdown, Any}, WebIO.Node{WebIO.DOM}, Vararg{WebIO.Node{WebIO.DOM}, N} where N})
precompile(Tuple{typeof(Base.vect), Widgets.Widget{:dropdown, Any}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Widgets.Widget{:dropdown, Any}, WebIO.Node{WebIO.DOM}, Vararg{WebIO.Node{WebIO.DOM}, N} where N})
precompile(Tuple{typeof(Base.string), String, Float64, String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.TTY}})
precompile(Tuple{typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.TTY}})
precompile(Tuple{typeof(Main.highlight_segs), ImageSegmentation.SegmentedImage{Array{Int64, 2}, ColorTypes.Gray{Float64}}, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, String, Array{Int64, 1}})
precompile(Tuple{typeof(Main.export_CSV), ImageSegmentation.SegmentedImage{Array{Int64, 2}, ColorTypes.Gray{Float64}}, OrderedCollections.OrderedDict{Any, Any}, OrderedCollections.OrderedDict{Any, Any}, OrderedCollections.OrderedDict{Any, Any}, String, Float64, String})
precompile(Tuple{typeof(Base.getindex), Widgets.Widget{:spinbox, Union{Nothing, Int64}}})
precompile(Tuple{typeof(Base.vect), Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Int64, Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Float64, Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Float64, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.promote_type), Type{Float64}, Type{Any}})
precompile(Tuple{typeof(Base.promote_type), Type{Int64}, Type{Any}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{Int64, Int64, Float64, Float64, String, String}})
precompile(Tuple{typeof(Base.push!), DataFrames.DataFrame, Array{Any, 1}})
precompile(Tuple{typeof(Base.push!), Array{Int64, 1}, Float64})
precompile(Tuple{getfield(Observables, Symbol("##setindex!#1")), getfield(Base, Symbol("#58#59")){Base.Fix2{typeof(Base.in), Array{Function, 1}}}, typeof(Base.setindex!), Observables.Observable{Any}, Tuple{typeof(Main.export_session_data), DataType}})
precompile(Tuple{getfield(Base, Symbol("#kw##setindex!")), NamedTuple{(:notify,), Tuple{getfield(Base, Symbol("#58#59")){Base.Fix2{typeof(Base.in), Array{Function, 1}}}}}, typeof(Base.setindex!), Observables.Observable{Any}, Tuple{typeof(Main.export_session_data), DataType}})
precompile(Tuple{typeof(Base.convert), Type{Any}, OrderedCollections.OrderedDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Int32, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Any, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Any, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Symbol, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Symbol, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Array{Any, 1}, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Array{Any, 1}, 1}})
precompile(Tuple{typeof(Base.length), Array{Array{Any, 1}, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Symbol, Any}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Base.SubString{String}, Base.SubString{String}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Tuple{Observables.AbstractObservable{T} where T, Union{Nothing, Bool}}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{Observables.Observable{Int64}, Nothing}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{Observables.Observable{Bool}, Nothing}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Nothing}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{WebIO.Asset, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{WebIO.Asset, 1}})
precompile(Tuple{typeof(Base.length), Array{WebIO.Asset, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Task, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{WebIO.AbstractConnection, Nothing}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{String, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{String, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{UInt8, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Int64, 2}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Int64, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Dict{Int64, ColorTypes.Gray{Float64}}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Int64, ColorTypes.Gray{Float64}}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Int64, ColorTypes.Gray{Float64}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Dict{Int64, Int64}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Int64, Int64}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Int64, Int64}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{WebIO.JSString, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{WebIO.JSString, 1}})
precompile(Tuple{typeof(Base.length), Array{WebIO.JSString, 1}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Tuple{Float64, String, String}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{Float64, String, String}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), UnionAll, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Int64}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{Function, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{Function, 1}})
precompile(Tuple{typeof(Base.length), Array{Function, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Any, String}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, String}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{Observables.Observable{Any}, Nothing}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.similar), Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}})
precompile(Tuple{typeof(Base.length), Array{OrderedCollections.OrderedDict{K, V} where V where K, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{Observables.Observable{Array{String, 1}}}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{ColorTypes.GrayA{Float16}, 2}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{ColorTypes.GrayA{Float16}, 2}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{Observables.Observable{Union{Nothing, Int64}}, Nothing}, Base.IdDict{Any, Any}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#24#27")), OrderedCollections.OrderedDict{Any, Any}})
precompile(Tuple{typeof(Base.iterate), OrderedCollections.OrderedDict{Any, Any}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Base.Generator{OrderedCollections.OrderedDict{Any, Any}, getfield(Main, Symbol("#24#27"))}})
precompile(Tuple{typeof(Base.iterate), OrderedCollections.OrderedDict{Any, Any}, Int64})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Generator{OrderedCollections.OrderedDict{Any, Any}, getfield(Main, Symbol("#24#27"))}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{OrderedCollections.OrderedDict{Any, Any}, getfield(Main, Symbol("#24#27"))}})
precompile(Tuple{getfield(Main, Symbol("#24#27")), Base.Pair{Int64, Widgets.Widget{:dropdown, Any}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Int64}, Type{String}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Int64, String}, Base.Generator{OrderedCollections.OrderedDict{Any, Any}, getfield(Main, Symbol("#24#27"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Int64, String}, String})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#25#28")), OrderedCollections.OrderedDict{Any, Any}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Base.Generator{OrderedCollections.OrderedDict{Any, Any}, getfield(Main, Symbol("#25#28"))}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Generator{OrderedCollections.OrderedDict{Any, Any}, getfield(Main, Symbol("#25#28"))}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{OrderedCollections.OrderedDict{Any, Any}, getfield(Main, Symbol("#25#28"))}})
precompile(Tuple{getfield(Main, Symbol("#25#28")), Base.Pair{Int64, Widgets.Widget{:spinbox, Union{Nothing, Int64}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Int64}, Type{Int64}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Int64, Int64}, Base.Generator{OrderedCollections.OrderedDict{Any, Any}, getfield(Main, Symbol("#25#28"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Int64, Int64}, String})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#26#29")), OrderedCollections.OrderedDict{Any, Any}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Base.Generator{OrderedCollections.OrderedDict{Any, Any}, getfield(Main, Symbol("#26#29"))}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Generator{OrderedCollections.OrderedDict{Any, Any}, getfield(Main, Symbol("#26#29"))}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{OrderedCollections.OrderedDict{Any, Any}, getfield(Main, Symbol("#26#29"))}})
precompile(Tuple{getfield(Main, Symbol("#26#29")), Base.Pair{Int64, Widgets.Widget{:checkbox, Bool}}})
precompile(Tuple{Type{Base.Dict{Int64, Bool}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Int64}, Type{Bool}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Int64, Bool}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Int64, Bool}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Int64, Bool}, Bool, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Int64, Bool}, Base.Generator{OrderedCollections.OrderedDict{Any, Any}, getfield(Main, Symbol("#26#29"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Any}, Base.Dict{Int64, Bool}, String})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Dict{Symbol, Base.Dict{Any, Any}}})
precompile(Tuple{typeof(BSON._lower_recursive), Base.Dict{Symbol, Base.Dict{Any, Any}}, Base.IdDict{Any, Any}, Array{Any, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(BSON, Symbol("#12#13")), Base.Iterators.Enumerate{Array{Any, 1}}})
precompile(Tuple{typeof(BSON.lower_recursive), Base.Dict{Symbol, Base.Dict{Any, Any}}})
precompile(Tuple{typeof(BSON.bson), Base.IOStream, Base.Dict{Symbol, Base.Dict{Any, Any}}})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(BSON, Symbol("#14#15")){Base.Dict{Symbol, Base.Dict{Any, Any}}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(BSON.applychildren!), getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Base.ValueIterator{Base.Dict{Any, Any}}})
precompile(Tuple{typeof(BSON.structdata), Base.Dict{Any, Any}})
precompile(Tuple{typeof(BSON._lower_recursive), Base.Dict{Any, Any}, Base.IdDict{Any, Any}, Array{Any, 1}})
precompile(Tuple{getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, Base.Dict{Any, Any}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.RefValue{Any}, Symbol})
precompile(Tuple{typeof(BSON.applychildren!), getfield(BSON, Symbol("#5#9")){Base.IdDict{Any, Any}, Array{Any, 1}}, Base.Dict{Symbol, Any}})
precompile(Tuple{getfield(BSON, Symbol("#_lower#8")){Base.IdDict{Any, Any}, Array{Any, 1}}, Type{T} where T})
precompile(Tuple{typeof(BSON._lower_recursive), Type{T} where T, Base.IdDict{Any, Any}, Array{Any, 1}})
precompile(Tuple{getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, Type{T} where T})
precompile(Tuple{typeof(BSON.typeof_), DataType})
precompile(Tuple{typeof(BSON.isanon), DataType})
precompile(Tuple{typeof(BSON.lower_anon), DataType})
precompile(Tuple{typeof(BSON.modpath), Module})
precompile(Tuple{typeof(BSON.lower), DataType})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.string), Tuple{Array{Symbol, 1}}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{String, 1}})
precompile(Tuple{typeof(Base.vect), Type{Any}, Vararg{Type{Any}, N} where N})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{DataType, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{String, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{DataType, 1}, Symbol})
precompile(Tuple{typeof(BSON.applychildren!), getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(BSON._lower_recursive), Array{DataType, 1}, Base.IdDict{Any, Any}, Array{Any, 1}})
precompile(Tuple{getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, Array{DataType, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Any, 1}})
precompile(Tuple{getfield(BSON, Symbol("#5#9")){Base.IdDict{Any, Any}, Array{Any, 1}}, String})
precompile(Tuple{typeof(BSON._lower_recursive), Array{Any, 1}, Base.IdDict{Any, Any}, Array{Any, 1}})
precompile(Tuple{getfield(BSON, Symbol("#5#9")){Base.IdDict{Any, Any}, Array{Any, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.getproperty), Base.RefValue{Any}, Symbol})
precompile(Tuple{typeof(Base.setproperty!), Base.RefValue{Any}, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(BSON._lower_recursive), Array{String, 1}, Base.IdDict{Any, Any}, Array{Any, 1}})
precompile(Tuple{getfield(BSON, Symbol("#5#9")){Base.IdDict{Any, Any}, Array{Any, 1}}, Array{String, 1}})
precompile(Tuple{getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.setproperty!), Base.RefValue{Any}, Symbol, Base.Dict{Symbol, Any}})
precompile(Tuple{getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Base.KeySet{Int64, Base.Dict{Int64, Bool}}})
precompile(Tuple{typeof(Base.copyto!), Array{Bool, 1}, Base.ValueIterator{Base.Dict{Int64, Bool}}})
precompile(Tuple{typeof(BSON.lower), Base.Dict{Int64, Bool}})
precompile(Tuple{typeof(BSON._lower_recursive), Base.Dict{Int64, Bool}, Base.IdDict{Any, Any}, Array{Any, 1}})
precompile(Tuple{getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, Base.Dict{Int64, Bool}})
precompile(Tuple{typeof(Base.vect), Type{Int64}, Vararg{DataType, N} where N})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReinterpretArray{UInt8, 1, Int64, Array{Int64, 1}}, Tuple{Int64}})
precompile(Tuple{getfield(Base, Symbol("#thrownonint#206")){Int64, UInt8}, Type{Int64}, Type{UInt8}, Int64})
precompile(Tuple{typeof(BSON.reinterpret_), Type{UInt8}, Array{Int64, 1}})
precompile(Tuple{typeof(BSON._lower_recursive), Array{Int64, 1}, Base.IdDict{Any, Any}, Array{Any, 1}})
precompile(Tuple{getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, Array{Int64, 1}})
precompile(Tuple{getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, Int64})
precompile(Tuple{typeof(BSON._lower_recursive), Array{UInt8, 1}, Base.IdDict{Any, Any}, Array{Any, 1}})
precompile(Tuple{getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.setproperty!), Base.RefValue{Any}, Symbol, Array{UInt8, 1}})
precompile(Tuple{typeof(BSON.reinterpret_), Type{UInt8}, Array{Bool, 1}})
precompile(Tuple{typeof(BSON._lower_recursive), Array{Bool, 1}, Base.IdDict{Any, Any}, Array{Any, 1}})
precompile(Tuple{getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, Array{Bool, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Base.KeySet{Int64, Base.Dict{Int64, String}}})
precompile(Tuple{typeof(Base.copyto!), Array{String, 1}, Base.ValueIterator{Base.Dict{Int64, String}}})
precompile(Tuple{typeof(BSON.lower), Base.Dict{Int64, String}})
precompile(Tuple{typeof(BSON._lower_recursive), Base.Dict{Int64, String}, Base.IdDict{Any, Any}, Array{Any, 1}})
precompile(Tuple{getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, Base.Dict{Int64, String}})
precompile(Tuple{getfield(Base, Symbol("#throw2#199")), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{Base.Colon}})
precompile(Tuple{typeof(Base.reshape), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{Base.Colon}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReinterpretArray{UInt8, 1, ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(BSON.reinterpret_), Type{UInt8}, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(BSON.lower), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(BSON._lower_recursive), Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Base.IdDict{Any, Any}, Array{Any, 1}})
precompile(Tuple{getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(Base.vect), Type{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{getfield(BSON, Symbol("#5#9")){Base.IdDict{Any, Any}, Array{Any, 1}}, Array{DataType, 1}})
precompile(Tuple{typeof(Base.vect), Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Type{T} where T, Int64})
precompile(Tuple{typeof(Base.promote_type), Type{DataType}, Type{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Tuple{DataType, Int64}})
precompile(Tuple{getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, Tuple{Float64, String, String}})
precompile(Tuple{getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, Float64})
precompile(Tuple{getfield(Base, Symbol("#throw2#199")), Array{ColorTypes.GrayA{Float16}, 2}, Tuple{Base.Colon}})
precompile(Tuple{typeof(Base.reshape), Array{ColorTypes.GrayA{Float16}, 2}, Tuple{Base.Colon}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReinterpretArray{UInt8, 1, ColorTypes.GrayA{Float16}, Array{ColorTypes.GrayA{Float16}, 1}}, Tuple{Int64}})
precompile(Tuple{getfield(Base, Symbol("#thrownonint#206")){ColorTypes.GrayA{Float16}, UInt8}, Type{ColorTypes.GrayA{Float16}}, Type{UInt8}, Int64})
precompile(Tuple{typeof(BSON.reinterpret_), Type{UInt8}, Array{ColorTypes.GrayA{Float16}, 1}})
precompile(Tuple{typeof(BSON.lower), Array{ColorTypes.GrayA{Float16}, 2}})
precompile(Tuple{typeof(BSON._lower_recursive), Array{ColorTypes.GrayA{Float16}, 2}, Base.IdDict{Any, Any}, Array{Any, 1}})
precompile(Tuple{getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, Array{ColorTypes.GrayA{Float16}, 2}})
precompile(Tuple{typeof(Base.vect), Type{Float16}})
precompile(Tuple{getfield(Base, Symbol("#throw2#199")), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{Base.Colon}})
precompile(Tuple{typeof(Base.reshape), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{Base.Colon}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReinterpretArray{UInt8, 1, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}}, Tuple{Int64}})
precompile(Tuple{getfield(Base, Symbol("#thrownonint#206")){ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, UInt8}, Type{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}}, Type{UInt8}, Int64})
precompile(Tuple{typeof(BSON.reinterpret_), Type{UInt8}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(BSON.lower), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(BSON._lower_recursive), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Base.IdDict{Any, Any}, Array{Any, 1}})
precompile(Tuple{getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(BSON.structdata), ImageSegmentation.SegmentedImage{Array{Int64, 2}, ColorTypes.Gray{Float64}}})
precompile(Tuple{getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, ImageSegmentation.SegmentedImage{Array{Int64, 2}, ColorTypes.Gray{Float64}}})
precompile(Tuple{getfield(BSON, Symbol("#5#9")){Base.IdDict{Any, Any}, Array{Any, 1}}, Type{T} where T})
precompile(Tuple{typeof(Base.vect), Type{Array{Int64, 2}}, Vararg{DataType, N} where N})
precompile(Tuple{typeof(Base.vect), Type{Float64}})
precompile(Tuple{getfield(Base, Symbol("#throw2#199")), Array{Int64, 2}, Tuple{Base.Colon}})
precompile(Tuple{typeof(Base.reshape), Array{Int64, 2}, Tuple{Base.Colon}})
precompile(Tuple{typeof(BSON.lower), Array{Int64, 2}})
precompile(Tuple{typeof(BSON._lower_recursive), Array{Int64, 2}, Base.IdDict{Any, Any}, Array{Any, 1}})
precompile(Tuple{getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Base.KeySet{Int64, Base.Dict{Int64, ColorTypes.Gray{Float64}}}})
precompile(Tuple{typeof(Base.copyto!), Array{ColorTypes.Gray{Float64}, 1}, Base.ValueIterator{Base.Dict{Int64, ColorTypes.Gray{Float64}}}})
precompile(Tuple{typeof(BSON.lower), Base.Dict{Int64, ColorTypes.Gray{Float64}}})
precompile(Tuple{typeof(BSON._lower_recursive), Base.Dict{Int64, ColorTypes.Gray{Float64}}, Base.IdDict{Any, Any}, Array{Any, 1}})
precompile(Tuple{getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, Base.Dict{Int64, ColorTypes.Gray{Float64}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReinterpretArray{UInt8, 1, ColorTypes.Gray{Float64}, Array{ColorTypes.Gray{Float64}, 1}}, Tuple{Int64}})
precompile(Tuple{getfield(Base, Symbol("#thrownonint#206")){ColorTypes.Gray{Float64}, UInt8}, Type{ColorTypes.Gray{Float64}}, Type{UInt8}, Int64})
precompile(Tuple{typeof(BSON.reinterpret_), Type{UInt8}, Array{ColorTypes.Gray{Float64}, 1}})
precompile(Tuple{typeof(BSON._lower_recursive), Array{ColorTypes.Gray{Float64}, 1}, Base.IdDict{Any, Any}, Array{Any, 1}})
precompile(Tuple{getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, Array{ColorTypes.Gray{Float64}, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Base.KeySet{Int64, Base.Dict{Int64, Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Base.ValueIterator{Base.Dict{Int64, Int64}}})
precompile(Tuple{typeof(BSON.structdata), Base.Dict{Int64, Int64}})
precompile(Tuple{typeof(BSON._lower_recursive), Base.Dict{Int64, Int64}, Base.IdDict{Any, Any}, Array{Any, 1}})
precompile(Tuple{getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, Base.Dict{Int64, Int64}})
precompile(Tuple{getfield(BSON, Symbol("#7#11")){Base.IdDict{Any, Any}, Array{Any, 1}}, Tuple{Int64, Float64}})
precompile(Tuple{getfield(BSON, Symbol("#12#13")), Tuple{Int64, Base.RefValue{Any}}})
precompile(Tuple{typeof(BSON.applychildren!), typeof(BSON.stripref), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(BSON.stripref), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(BSON.stripref), Base.RefValue{Any}})
precompile(Tuple{typeof(BSON.stripref), String})
precompile(Tuple{typeof(BSON.stripref), Int64})
precompile(Tuple{typeof(BSON.applychildren!), typeof(BSON.stripref), Array{Any, 1}})
precompile(Tuple{typeof(BSON.stripref), Array{Any, 1}})
precompile(Tuple{typeof(BSON.stripref), Array{UInt8, 1}})
precompile(Tuple{typeof(BSON.stripref), Float64})
precompile(Tuple{typeof(Base.unsafe_write), Base.IOStream, Base.RefValue{Int32}, Int64})
precompile(Tuple{typeof(Base.write), Base.IOStream, Int32, Array{UInt8, 1}})
precompile(Tuple{typeof(BSON.bson_doc), Base.IOStream, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(BSON.bson_primitive), Base.IOStream, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, String, UInt8})
precompile(Tuple{typeof(Base.unsafe_write), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.RefValue{Int32}, Int64})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Int32, Array{UInt8, 1}})
precompile(Tuple{typeof(BSON.bson_doc), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(BSON.bson_pair), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Int32, String, UInt8})
precompile(Tuple{typeof(BSON.bson_pair), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, String})
precompile(Tuple{typeof(Base.unsafe_write), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.RefValue{Int64}, Int64})
precompile(Tuple{typeof(BSON.bson_pair), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, getfield(BSON, Symbol("#3#4"))}})
precompile(Tuple{typeof(BSON.bson_primitive), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Any, 1}})
precompile(Tuple{typeof(BSON.bson_pair), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Array{Any, 1}})
precompile(Tuple{getfield(BSON, Symbol("#3#4")), Tuple{Int64, Array{Any, 1}}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{String, Array{Any, 1}}}, Base.Iterators.Enumerate{Array{Any, 1}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, Array{Any, 1}}, 1}, Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, getfield(BSON, Symbol("#3#4"))}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, Array{Any, 1}}, 1}, Base.Pair{String, Array{Any, 1}}, Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, getfield(BSON, Symbol("#3#4"))}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(BSON.bson_pair), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Array{Any, 1}})
precompile(Tuple{typeof(BSON.bson_doc), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Base.Pair{String, Array{Any, 1}}, 1}})
precompile(Tuple{getfield(BSON, Symbol("#3#4")), Tuple{Int64, String}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{String, String}}, Base.Iterators.Enumerate{Array{Any, 1}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, String}, 1}, Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, getfield(BSON, Symbol("#3#4"))}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, String}, 1}, Base.Pair{String, String}, Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, getfield(BSON, Symbol("#3#4"))}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(BSON.bson_pair), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String})
precompile(Tuple{typeof(BSON.bson_doc), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Base.Pair{String, String}, 1}})
precompile(Tuple{getfield(BSON, Symbol("#3#4")), Tuple{Int64, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{String, Base.Dict{Symbol, Any}}}, Base.Iterators.Enumerate{Array{Any, 1}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, Base.Dict{Symbol, Any}}, 1}, Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, getfield(BSON, Symbol("#3#4"))}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, Base.Dict{Symbol, Any}}, 1}, Base.Pair{String, Base.Dict{Symbol, Any}}, Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, getfield(BSON, Symbol("#3#4"))}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{String, B} where B, 1}, Int64, Array{Base.Pair{String, Base.Dict{Symbol, Any}}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Pair{String, Base.Dict{Symbol, Any}}, 1}, Base.Pair{String, String}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, B} where B, 1}, Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, getfield(BSON, Symbol("#3#4"))}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(BSON.bson_doc), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Base.Pair{String, B} where B, 1}})
precompile(Tuple{typeof(BSON.bson_pair), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(BSON.bson_doc), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Base.Pair{String, Base.Dict{Symbol, Any}}, 1}})
precompile(Tuple{getfield(BSON, Symbol("#3#4")), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{String, Int64}}, Base.Iterators.Enumerate{Array{Any, 1}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, Int64}, 1}, Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, getfield(BSON, Symbol("#3#4"))}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, Int64}, 1}, Base.Pair{String, Int64}, Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, getfield(BSON, Symbol("#3#4"))}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(BSON.bson_pair), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Int64})
precompile(Tuple{typeof(BSON.bson_doc), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Base.Pair{String, Int64}, 1}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Int32, UInt8, Array{UInt8, 1}})
precompile(Tuple{typeof(BSON.bson_pair), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Pair{String, Base.Dict{Symbol, Any}}, 1}, Base.Pair{String, Array{Any, 1}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Pair{String, Base.Dict{Symbol, Any}}, 1}, Base.Pair{String, Int64}, Int64})
precompile(Tuple{getfield(BSON, Symbol("#3#4")), Tuple{Int64, Float64}})
precompile(Tuple{typeof(Base._array_for), Type{Base.Pair{String, Float64}}, Base.Iterators.Enumerate{Array{Any, 1}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Base.Pair{String, Float64}, 1}, Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, getfield(BSON, Symbol("#3#4"))}, Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{String, Float64}, 1}, Base.Pair{String, Float64}, Base.Generator{Base.Iterators.Enumerate{Array{Any, 1}}, getfield(BSON, Symbol("#3#4"))}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{String, B} where B, 1}, Int64, Array{Base.Pair{String, Float64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Pair{String, Float64}, 1}, Base.Pair{String, String}, Int64})
precompile(Tuple{typeof(Base.unsafe_write), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.RefValue{Float64}, Int64})
precompile(Tuple{typeof(BSON.bson_pair), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Float64})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{String, B} where B, 1}, Int64, Array{Base.Pair{String, Int64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Base.Pair{String, Int64}, 1}, Base.Pair{String, Float64}, Int64})
precompile(Tuple{getfield(Observables, Symbol("##setindex!#1")), getfield(Base, Symbol("#58#59")){Base.Fix2{typeof(Base.in), Array{Function, 1}}}, typeof(Base.setindex!), Observables.Observable{Any}, Tuple{typeof(Main.remove_segments), DataType}})
precompile(Tuple{getfield(Base, Symbol("#kw##setindex!")), NamedTuple{(:notify,), Tuple{getfield(Base, Symbol("#58#59")){Base.Fix2{typeof(Base.in), Array{Function, 1}}}}}, typeof(Base.setindex!), Observables.Observable{Any}, Tuple{typeof(Main.remove_segments), DataType}})
precompile(Tuple{typeof(Main.remove_segments), ImageSegmentation.SegmentedImage{Array{Int64, 2}, ColorTypes.Gray{Float64}}, Array{Int64, 1}})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(OhMyREPL.BracketInserter, Symbol("#6#13")){Array{Char, 1}, Array{Char, 1}}, String}, Any, Any})
precompile(Tuple{typeof(REPL.LineEdit.edit_backspace), REPL.LineEdit.PromptState})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#6#13")){Array{Char, 1}, Array{Char, 1}}, REPL.LineEdit.MIState, REPL.LineEditREPL, String})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#27#28")){getfield(OhMyREPL.BracketInserter, Symbol("#2#9")){Char}, String}, Any, Any})
precompile(Tuple{getfield(OhMyREPL.BracketInserter, Symbol("#2#9")){Char}, REPL.LineEdit.MIState, REPL.LineEditREPL, Vararg{Any, N} where N})
