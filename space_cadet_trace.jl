precompile(Tuple{typeof(Base.push!), Array{Function, 1}, Function})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Expr, 1}})
precompile(Tuple{getfield(CuArrays, Symbol("#90#91")){getfield(DiffRules, Symbol("#31#32"))}, Symbol})
precompile(Tuple{getfield(CuArrays, Symbol("#90#91")){getfield(DiffRules, Symbol("#55#56"))}, Symbol})
precompile(Tuple{getfield(CuArrays, Symbol("#90#91")){getfield(DiffRules, Symbol("#29#30"))}, Symbol})
precompile(Tuple{getfield(CuArrays, Symbol("#90#91")){getfield(DiffRules, Symbol("#53#54"))}, Symbol})
precompile(Tuple{getfield(CuArrays, Symbol("#90#91")){getfield(DiffRules, Symbol("#33#34"))}, Symbol})
precompile(Tuple{getfield(CuArrays, Symbol("#90#91")){getfield(DiffRules, Symbol("#59#60"))}, Symbol})
precompile(Tuple{getfield(CuArrays, Symbol("#90#91")){getfield(DiffRules, Symbol("#57#58"))}, Symbol})
precompile(Tuple{getfield(CuArrays, Symbol("#90#91")){getfield(DiffRules, Symbol("#61#62"))}, Symbol})
precompile(Tuple{getfield(CuArrays, Symbol("#90#91")){getfield(DiffRules, Symbol("#83#84"))}, Symbol})
precompile(Tuple{getfield(CuArrays, Symbol("#90#91")){getfield(DiffRules, Symbol("#81#82"))}, Symbol})
precompile(Tuple{getfield(CuArrays, Symbol("#90#91")){getfield(DiffRules, Symbol("#85#86"))}, Symbol})
precompile(Tuple{getfield(CuArrays, Symbol("#90#91")){getfield(DiffRules, Symbol("#95#96"))}, Symbol})
precompile(Tuple{getfield(CuArrays, Symbol("#90#91")){getfield(DiffRules, Symbol("#93#94"))}, Symbol})
precompile(Tuple{getfield(CuArrays, Symbol("#90#91")){getfield(DiffRules, Symbol("#97#98"))}, Symbol})
precompile(Tuple{getfield(CuArrays, Symbol("#90#91")){getfield(DiffRules, Symbol("#13#14"))}, Symbol})
precompile(Tuple{getfield(CuArrays, Symbol("#90#91")){getfield(DiffRules, Symbol("#19#20"))}, Symbol})
precompile(Tuple{getfield(CuArrays, Symbol("#90#91")){getfield(DiffRules, Symbol("#21#22"))}, Symbol})
precompile(Tuple{getfield(CuArrays, Symbol("#90#91")){getfield(DiffRules, Symbol("#27#28"))}, Symbol})
precompile(Tuple{getfield(CuArrays, Symbol("#90#91")){getfield(DiffRules, Symbol("#5#6"))}, Symbol})
precompile(Tuple{getfield(CuArrays, Symbol("#90#91")){getfield(DiffRules, Symbol("#7#8"))}, Symbol})
precompile(Tuple{getfield(CuArrays, Symbol("#92#93")), Symbol})
precompile(Tuple{getfield(CuArrays, Symbol("#94#95")), Symbol})
precompile(Tuple{getfield(CuArrays, Symbol("#96#97")), Symbol})
precompile(Tuple{getfield(CuArrays, Symbol("#98#99")), Symbol})
precompile(Tuple{getfield(CuArrays, Symbol("#100#101")), Symbol})
precompile(Tuple{typeof(WebIO.setup_provider), Symbol})
precompile(Tuple{typeof(WebIO.re_register_renderables)})
precompile(Tuple{typeof(WebIO.setup), Symbol})
precompile(Tuple{typeof(Base.vect), Base.Pair{String, String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.promote_typeof), Base.Pair{String, String}, Base.Pair{String, String}, Vararg{Any, N} where N})
precompile(Tuple{Type{Ref{WebIO.WebIOServer{S} where S}}})
precompile(Tuple{Type{Ref{Any}}, Function})
precompile(Tuple{getfield(Base, Symbol("#printstyled##kw")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#702")), Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#with_output_color##kw")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(DocStringExtensions, Symbol("#20#21")){typeof(DocStringExtensions.template_hook)}, LineNumberNode, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, REPL.LineEdit.Prompt}, Vararg{Base.Pair{Symbol, REPL.LineEdit.Prompt}, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#45#76"))}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.convert), Type{Any}, Function})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#74#105")){REPL.LineEdit.HistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, getfield(REPL, Symbol("#49#58")){REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{String, getfield(REPL.LineEdit, Symbol("#251#255")){REPL.LineEdit.PrefixHistoryPrompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Dict{Any, Any}}, Base.Pair{Char, getfield(REPL, Symbol("#39#42")){REPL.LineEdit.Prompt}}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.UnixTerminal, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(REPL.LineEdit, Symbol("#111#164")), String}, Any, Any})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("##edit_splice!#17")), Bool, typeof(REPL.LineEdit.edit_splice!), Any, Base.Pair{#s664, #s663} where #s663<:Integer where #s664<:Integer, AbstractString})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.LineEdit.ModeState})
precompile(Tuple{typeof(Base.string), String, String, String, Symbol, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{ArgumentError, Array{Base.StackTraces.StackFrame, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{ArgumentError, Array{Base.StackTraces.StackFrame, 1}}, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("##showerror#648")), Bool, typeof(Base.showerror), Base.IOContext{REPL.Terminals.TTYTerminal}, ArgumentError, Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{getfield(Base, Symbol("#showerror##kw")), NamedTuple{(:backtrace,), Tuple{Bool}}, typeof(Base.showerror), Base.IOContext{REPL.Terminals.TTYTerminal}, ArgumentError, Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{typeof(Base.showerror), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, ArgumentError})
precompile(Tuple{getfield(Base, Symbol("#649#650")){ArgumentError}, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}})
precompile(Tuple{typeof(REPL.LineEdit.refresh_multi_line), REPL.Terminals.TerminalBuffer, REPL.LineEdit.ModeState})
precompile(Tuple{getfield(REPL.LineEdit, Symbol("#22#23")){getfield(REPL.LineEdit, Symbol("#109#162")), String}, Any, Any})
precompile(Tuple{typeof(Base.keys), Base.Dict{String, Base.Dict{String, Pkg.REPLMode.CommandSpec}}})
precompile(Tuple{typeof(Base.copyto!), Array{String, 1}, Base.KeySet{String, Base.Dict{String, Base.Dict{String, Pkg.REPLMode.CommandSpec}}}})
precompile(Tuple{typeof(Base.collect), Base.KeySet{String, Base.Dict{String, Base.Dict{String, Pkg.REPLMode.CommandSpec}}}})
precompile(Tuple{typeof(Base.map), Function, Base.ValueIterator{Base.Dict{String, Pkg.REPLMode.CommandSpec}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Pkg.REPLMode, Symbol("#44#45")), Base.ValueIterator{Base.Dict{String, Pkg.REPLMode.CommandSpec}}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Base.ValueIterator{Base.Dict{String, Pkg.REPLMode.CommandSpec}}, getfield(Pkg.REPLMode, Symbol("#44#45"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.ValueIterator{Base.Dict{String, Pkg.REPLMode.CommandSpec}}, getfield(Pkg.REPLMode, Symbol("#44#45"))}})
precompile(Tuple{getfield(Pkg.REPLMode, Symbol("#50#52")), String})
precompile(Tuple{typeof(Base.filter), getfield(Pkg.REPLMode, Symbol("#50#52")), Array{String, 1}})
precompile(Tuple{typeof(REPL.LineEdit.edit_splice!), Any, Base.Pair{#s664, #s663} where #s663<:Integer where #s664<:Integer, AbstractString})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.rand), Type{Float64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.rand), Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{AbstractArray{T, 1} where T}})
precompile(Tuple{Type{StaticArrays.Size{(0,)}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{PlotlyBase.GenericTrace{T} where T<:Base.AbstractDict{Symbol, Any}, 1}}})
precompile(Tuple{getfield(Plots, Symbol("##plot#122")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{typeof(RecipesBase.plot), Array{Float64, 1}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.setproperty!), Plots.CurrentBackend, Symbol, Plots.GRBackend})
precompile(Tuple{Type{Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}}})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend, Int64, RecipesPipeline.DefaultsDict, Array{Plots.Series, 1}, Nothing, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.EmptyLayout, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Bool})
precompile(Tuple{typeof(Base.convert), Type{Any}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(Base.prepend!), Array{RecipesBase.RecipeData, 1}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Base._replace!), getfield(RecipesPipeline, Symbol("#37#38")), Array{Float64, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, typeof(Base.float)}, Int64})
precompile(Tuple{typeof(RecipesPipeline._prepare_series_data), Array{Float64, 1}})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Nothing, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.OneTo{Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Nothing, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(RecipesPipeline._process_fillrange), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.length), Array{Nothing, 1}})
precompile(Tuple{typeof(RecipesPipeline._process_ribbon), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.getindex), Array{Nothing, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesBase.RecipeData, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._filter_input_data!), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.process_userrecipe!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.OneTo{Int64}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Bool, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, String, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Symbol})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(PlotUtils.isdark), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setproperty!), Plots.Plot{Plots.GRBackend}, Symbol, Nothing})
precompile(Tuple{getfield(Plots, Symbol("##GridLayout#139")), Plots.RootLayout, Array{Float64, 1}, Array{Float64, 1}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Plots.GridLayout}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{Type{Array{RecipesBase.AbstractLayout, 2}}, UndefInitializer, Int64, Int64})
precompile(Tuple{Type{Measures.Length{:pct, Float64}}, Float64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64, Int64})
precompile(Tuple{getfield(Core, Symbol("#Type##kw")), NamedTuple{(:parent,), Tuple{Plots.GridLayout}}, Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{Type{Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{getfield(Base, Symbol("##chop#325")), Int64, Int64, typeof(Base.chop), String})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.get), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Float64, Symbol})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.allocatedinline), Type{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(PlotUtils.plot_color), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 1}})
precompile(Tuple{typeof(PlotUtils.adjust_lch), ColorTypes.RGBA{Float64}, Float64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{ColorTypes.RGBA{Float64}, 1}, ColorTypes.RGBA{Float64}, Base.Generator{Array{ColorTypes.RGBA{Float64}, 1}, getfield(PlotUtils, Symbol("#2#3")){Float64, Int64}}, Int64})
precompile(Tuple{typeof(Base._collect), Array{ColorTypes.RGBA{Float64}, 1}, Base.Generator{Array{ColorTypes.RGBA{Float64}, 1}, getfield(PlotUtils, Symbol("#2#3")){Float64, Int64}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{ColorTypes.RGB{Float64}, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{ColorTypes.RGB{Float64}, 1}, Array{ColorTypes.RGBA{Float64}, 1}})
precompile(Tuple{getfield(Colors, Symbol("##distinguishable_colors#11")), Bool, typeof(Base.identity), Array{Float64, 1}, Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, typeof(Colors.distinguishable_colors), Int64, Array{ColorTypes.RGB{Float64}, 1}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.Sort.Float.nans2right!), Array{Float64, 1}, Base.Order.ForwardOrdering, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Sort.Float.Left})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Float64, 1}, Int64, Int64, Base.Sort.Float.Left})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Sort.Float.Left})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Sort.Float.Right})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Float64, 1}, Int64, Int64, Base.Sort.Float.Right})
precompile(Tuple{typeof(Base.sort!), Array{Float64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Sort.Float.Right})
precompile(Tuple{typeof(Base.Sort.Float.fpsort!), Array{Float64, 1}, Base.Sort.QuickSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(-)), Tuple{Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}, Base.Broadcast.Extruded{Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.unaliascopy), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.unalias), Array{Float64, 1}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{getfield(Base, Symbol("##diff#413")), Int64, typeof(Base.diff), Array{Float64, 1}})
precompile(Tuple{typeof(Base.error)})
precompile(Tuple{typeof(PlotUtils.getpctrange), Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(/)), Tuple{Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}, Int64}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(/)), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.:(+)), Tuple{Float64, Base.Broadcast.Extruded{Array{Float64, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(PlotUtils.get_zvalues), Int64})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(ColorTypes._ccolor), Type{ColorTypes.RGBA{Float64}}, Type{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, Type{Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(Base.copyto!), Array{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}, 1}, Int64, Array{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{ColorTypes.RGBA{Float64}, 1}, ColorTypes.RGBA{Float64}, Base.Generator{Array{ColorTypes.RGB{Float64}, 1}, Type{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}}, Int64})
precompile(Tuple{typeof(PlotUtils.gradient_from_list), Array{ColorTypes.RGB{Float64}, 1}})
precompile(Tuple{getfield(PlotUtils, Symbol("##generate_colorgradient#1")), Array{ColorTypes.RGBA{Float64}, 1}, Float64, Int64, Int64, typeof(PlotUtils.generate_colorgradient), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(PlotUtils.generate_colorgradient), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.getindex), PlotUtils.ColorGradient, Float64})
precompile(Tuple{typeof(PlotUtils.get_color_palette), Symbol, ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{typeof(ColorTypes._convert), Type{ColorTypes.Lab{Float64}}, Type{ColorTypes.Lab{T} where T<:AbstractFloat}, Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(Base.Math.cbrt), Float64})
precompile(Tuple{typeof(Base.atan), Float64})
precompile(Tuple{typeof(Base.atan), Float64, Float64})
precompile(Tuple{typeof(Base.__cat), Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Int64}, Tuple{Bool}, ColorTypes.RGBA{Float64}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.__subarray_throw_boundserror), Type{Base.SubArray{ColorTypes.RGBA{Float64}, 1, Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}}, Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.UnitRange{Int64}}, Int64, Int64, Tuple{Int64}})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{ColorTypes.RGBA{Float64}, 1, Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Base.UnitRange{Int64}}, true}, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.cat_indices), Array{ColorTypes.RGBA{Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{ColorTypes.RGBA{Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.throw_setindex_mismatch), Array{ColorTypes.RGBA{Float64}, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{ColorTypes.RGBA{Float64}, 1}, Array{ColorTypes.RGBA{Float64}, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(ColorTypes._convert), Type{ColorTypes.RGB{Float64}}, Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, Type{ColorTypes.LCHab{T} where T<:AbstractFloat}, ColorTypes.LCHab{Float64}})
precompile(Tuple{typeof(ColorTypes._convert), Type{ColorTypes.RGB{Float64}}, Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}, Type{ColorTypes.Lab{T} where T<:AbstractFloat}, ColorTypes.Lab{Float64}})
precompile(Tuple{typeof(Base.__cat), Array{Float64, 1}, Tuple{Int64}, Tuple{Bool}, Float64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.fill!), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}, true}, Float64})
precompile(Tuple{typeof(Base.cat_indices), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.cat_size), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Base.Sort, Symbol("##sortperm#11")), Base.Sort.QuickSortAlg, Function, Function, Nothing, Base.Order.ForwardOrdering, typeof(Base.sortperm), Array{Float64, 1}})
precompile(Tuple{Type{Base.Order.Perm{O, V} where V<:(AbstractArray{T, 1} where T) where O<:Base.Order.Ordering}, Base.Order.ForwardOrdering, Array{Float64, 1}})
precompile(Tuple{typeof(Base.Sort.Float.nans2right!), Array{Int64, 1}, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.Perm{Base.Sort.Float.Left, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Int64, 1}, Int64, Int64, Base.Order.Perm{Base.Sort.Float.Left, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Sort.Float.Left, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.Perm{Base.Sort.Float.Right, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Sort.partition!), Array{Int64, 1}, Int64, Int64, Base.Order.Perm{Base.Sort.Float.Right, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Int64, Int64, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Sort.Float.Right, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Sort.Float.fpsort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.Perm{Base.Order.ForwardOrdering, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, Symbol}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Array{Plots.Subplot{Plots.GRBackend}, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Axis, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(RecipesPipeline.is_seriestype_supported), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Float64})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Int64})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Nothing})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Array{ColorTypes.RGBA{Float64}, 1}})
precompile(Tuple{typeof(PlotUtils.get_color_palette), Array{ColorTypes.RGBA{Float64}, 1}, ColorTypes.RGBA{Float64}, Int64})
precompile(Tuple{typeof(RecipesPipeline.is3d), Symbol})
precompile(Tuple{typeof(RecipesPipeline.is3d), Type{T} where T})
precompile(Tuple{typeof(RecipesPipeline.needs_3d_axes), Symbol})
precompile(Tuple{typeof(RecipesPipeline.needs_3d_axes), Type{T} where T})
precompile(Tuple{typeof(Base.:(==)), Plots.Axis, Symbol})
precompile(Tuple{typeof(Base.:(==)), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.eltype), Nothing})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Bool})
precompile(Tuple{typeof(RecipesPipeline.is_surface), Symbol})
precompile(Tuple{typeof(RecipesPipeline.is_surface), Type{T} where T})
precompile(Tuple{typeof(Base.:(==)), Array{ColorTypes.RGBA{Float64}, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.in), String, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Symbol, Nothing}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Base.Set{Symbol}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Base.Set{Symbol}}, Symbol})
precompile(Tuple{typeof(Base.get!), getfield(Base, Symbol("#242#243")){Base.Set{Symbol}}, Base.Dict{Symbol, Base.Set{Symbol}}, Symbol})
precompile(Tuple{typeof(Base.union!), Base.Set{Symbol}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base._delete!), Base.Dict{Symbol, Nothing}, Int64})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Symbol}, Base.KeySet{Symbol, Base.Dict{Symbol, Any}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Base.Set{Symbol}}}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int64}, Base.Iterators.Flatten{Tuple{Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Base.Set{Symbol}}}, Base.HasEltype, Base.SizeUnknown})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}, Int64})
precompile(Tuple{typeof(Base.iterate), RecipesPipeline.DefaultsDict, Tuple{Array{Symbol, 1}, Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Nothing})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Base.OneTo{Int64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(Base.:(!=)), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(!=)), Bool, Bool})
precompile(Tuple{typeof(Base.:(==)), Bool, Symbol})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Tuple{Plots.Plot{Plots.GRBackend}, Bool}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Tuple{Plots.Plot{Plots.GRBackend}, Bool}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Any}, Tuple{Plots.Plot{Plots.GRBackend}, Bool}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.Plot{Plots.GRBackend}, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.Plot{Plots.GRBackend}, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.Multimedia.display), Plots.PlotsDisplay, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.:(*)), Int64, Measures.Length{:mm, Float64}})
precompile(Tuple{Type{Measures.Length{:mm, Float64}}, Float64})
precompile(Tuple{Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.setproperty!), Plots.GridLayout, Symbol, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.convert), Type{Measures.BoundingBox{P1, P2} where P2<:(Tuple{Vararg{Measures.Measure, N}} where N) where P1<:(Tuple{Vararg{Measures.Measure, N}} where N)}, Measures.BoundingBox{Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}, Tuple{Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}}}})
precompile(Tuple{typeof(Base.map), Function, Array{RecipesBase.AbstractLayout, 2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Plots._update_min_padding!), Array{RecipesBase.AbstractLayout, 2}})
precompile(Tuple{typeof(Base._collect), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}, Base.EltypeUnknown, Base.HasShape{2}})
precompile(Tuple{typeof(Base.collect_similar), Array{RecipesBase.AbstractLayout, 2}, Base.Generator{Array{RecipesBase.AbstractLayout, 2}, typeof(Plots._update_min_padding!)}})
precompile(Tuple{typeof(Base.:(==)), Int64, Symbol})
precompile(Tuple{typeof(Base.:(==)), Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.:(+)), Measures.Length{:mm, Float64}, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.:(==)), String, Symbol})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Nothing, Bool}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.getproperty), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.:(<=)), Float64, Float64})
precompile(Tuple{typeof(Base.isfinite), Float64})
precompile(Tuple{typeof(Base.getproperty), Plots.Axis, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{getfield(RecipesPipeline, Symbol("#11#12")){Symbol}, Float64})
precompile(Tuple{typeof(Base.identity), Float64})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Float64})
precompile(Tuple{typeof(Base.:(==)), Symbol, Function})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Core.Compiler.Signature}, Base.MappingRF{getfield(PlotUtils, Symbol("#41#44")), Base.BottomRF{typeof(Base.max)}}, Core.Compiler.Const, Array{Any, 1}, Type{T} where T})
precompile(Tuple{typeof(PlotUtils.bounding_order_of_magnitude), Float64})
precompile(Tuple{typeof(Base._round_digits), Float64, Base.Rounding.RoundingMode{:Down}, Int64, Int64})
precompile(Tuple{typeof(Base._foldl_impl), Base.MappingRF{getfield(PlotUtils, Symbol("#41#44")), Base.BottomRF{typeof(Base.max)}}, Base._InitialValue, Array{Tuple{Float64, Float64}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(PlotUtils, Symbol("#42#45")){Float64}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(PlotUtils, Symbol("#42#45")){Float64}}})
precompile(Tuple{typeof(Base.hidigit), Float64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(PlotUtils, Symbol("#43#46")){Float64}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(PlotUtils, Symbol("#43#46")){Float64}}})
precompile(Tuple{typeof(PlotUtils.optimize_ticks_typed), Float64, Float64, Bool, Array{Tuple{Float64, Float64}, 1}, Int64, Int64, Int64, Float64, Float64, Float64, Float64, Bool, Nothing})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Float64, Float64}, 1}, Tuple{Float64, Float64}, Base.Generator{Array{Tuple{Float64, Float64}, 1}, getfield(PlotUtils, Symbol("#39#40"))}, Int64})
precompile(Tuple{getfield(PlotUtils, Symbol("#optimize_ticks##kw")), NamedTuple{(:k_min, :k_max), Tuple{Int64, Int64}}, typeof(PlotUtils.optimize_ticks), Float64, Float64})
precompile(Tuple{typeof(Base.map), Function, Array{Float64, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}, Array{Float64, 1}})
precompile(Tuple{typeof(Base._collect), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}})
precompile(Tuple{typeof(Base._similar_for), Array{Float64, 1}, Type{Float64}, Base.Generator{Array{Float64, 1}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Float64, 1}, Base.Generator{Array{Float64, 1}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, getfield(RecipesPipeline, Symbol("#13#14")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.any), Function, Array{Float64, 1}})
precompile(Tuple{getfield(Base, Symbol("##any#592")), Function, typeof(Base.any), Function, Array{Float64, 1}})
precompile(Tuple{typeof(Base._any), typeof(Base.isfinite), Array{Float64, 1}, Base.Colon})
precompile(Tuple{typeof(Showoff.concrete_minimum), Array{Float64, 1}})
precompile(Tuple{typeof(Showoff.concrete_maximum), Array{Float64, 1}})
precompile(Tuple{typeof(Base.filter), typeof(Base.isfinite), Array{Float64, 1}})
precompile(Tuple{typeof(Showoff.plain_precision_heuristic), Array{Float64, 1}})
precompile(Tuple{typeof(Showoff.format_fixed), Float64, Int64})
precompile(Tuple{typeof(Base.Math.throw_exp_domainerror), Float64})
precompile(Tuple{getfield(Showoff, Symbol("#1#2")), Float64})
precompile(Tuple{typeof(Base.grow_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Filter{typeof(Base.isfinite), Array{Float64, 1}}, getfield(Showoff, Symbol("#1#2"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Float64, 1}, Base.Generator{Base.Iterators.Filter{typeof(Base.isfinite), Array{Float64, 1}}, getfield(Showoff, Symbol("#1#2"))}})
precompile(Tuple{typeof(Showoff.format_fixed_scientific), Float64, Int64, Bool})
precompile(Tuple{typeof(Showoff.showoff), Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.map), Function, Array{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.string), Array{String, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{String, 1}, typeof(Base.string)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{String, 1}, Base.Generator{Array{String, 1}, typeof(Base.string)}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Float64, 1}, Array{String, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.in), Tuple{Array{Float64, 1}, Array{String, 1}}, Tuple{Nothing, Bool, Symbol}})
precompile(Tuple{typeof(Base.:(==)), Float64, Symbol})
precompile(Tuple{typeof(Base.in), String, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.parse), Type{ColorTypes.Colorant{T, N} where N where T}, String})
precompile(Tuple{typeof(Base.in), Int64, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.in), Float64, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.in), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Plots.Font}, String, Int64, Symbol, Symbol, Float64, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.sign), Int64})
precompile(Tuple{Type{NamedTuple{(:halign, :valign, :rotation), T} where T<:Tuple}, Tuple{Symbol, Symbol, Int64}})
precompile(Tuple{typeof(Plots.gr_set_textcolor), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{getfield(Plots, Symbol("##gr_set_font#334")), Symbol, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Int64, typeof(Plots.gr_set_font), Plots.Font})
precompile(Tuple{typeof(Base.println), Base.IOContext{REPL.Terminals.TTYTerminal}, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.IOContext{REPL.Terminals.TTYTerminal}, String, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{ErrorException, Array{Base.StackTraces.StackFrame, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{ErrorException, Array{Base.StackTraces.StackFrame, 1}}, Int64, Int64})
